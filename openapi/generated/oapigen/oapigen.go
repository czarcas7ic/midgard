// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset balance in the saver pool by member which is redeemable
	AssetBalance string `json:"assetBalance"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
