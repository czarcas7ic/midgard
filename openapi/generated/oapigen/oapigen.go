// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryItemPool defines model for DepthHistoryItemPool.
type DepthHistoryItemPool struct {

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8) in rune, the total value in the pool (both assets and rune) at the end of the interval.
	// Note: this is twice of the pool's Rune depth. (as pools are symmetrically balance)
	TotalDepth string `json:"totalDepth"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited to the pool by member.
	// This field is same as the `asset_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total Rune that is currently deposited to the pool by member.
	// This field is same as the `rune_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	RuneDeposit string `json:"runeDeposit"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited by the member
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime    string                 `json:"endTime"`
	PoolsDepth []DepthHistoryItemPool `json:"poolsDepth"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters. It may be -1 if
	// Midgard is having trouble counting the results and has to cancel the count query
	// (temporary fix).
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
