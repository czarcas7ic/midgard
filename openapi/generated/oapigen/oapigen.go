// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryItemPool defines model for DepthHistoryItemPool.
type DepthHistoryItemPool struct {

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8) in rune, the total value in the pool (both assets and rune) at the end of the interval.
	// Note: this is twice of the pool's Rune depth. (as pools are symmetrically balance)
	TotalDepth string `json:"totalDepth"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime    string                 `json:"endTime"`
	PoolsDepth []DepthHistoryItemPool `json:"poolsDepth"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters. It may be -1 if
	// Midgard is having trouble counting the results and has to cancel the count query
	// (temporary fix).
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
