// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"175IEAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
