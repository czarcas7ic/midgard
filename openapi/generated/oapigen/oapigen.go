// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// action query metadata
type ActionMeta struct {

	// Int64, The last action event_id that can be used for pagination.
	// This token is needed to be given for next page.
	NextPageToken string `json:"nextPageToken"`

	// Int64, The first action event_id that can be used for previous pagination.
	// This token is needed to be given for previous page.
	PrevPageToken string `json:"prevPageToken"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BorrowerDetails defines model for BorrowerDetails.
type BorrowerDetails struct {

	// List details of all the loans identified with the given address
	Pools []BorrowerPool `json:"pools"`
}

// BorrowerPool defines model for BorrowerPool.
type BorrowerPool struct {

	// The asset that the borrower used as collateral
	CollateralAsset string `json:"collateral_asset"`

	// Int64(e8), The total amount of collateral the system paid back to the user
	CollateralDown string `json:"collateral_down"`

	// Int64(e8), The total amount of collateral that user has given
	CollateralUp string `json:"collateral_up"`

	// Int64(e8), The total amount of debt that the user paid back. denominated in TOR.
	DebtDownTor string `json:"debt_down_tor"`

	// Int64(e8), The total amount of debt user is given as debt. denominated in TOR.
	DebtUpTor string `json:"debt_up_tor"`

	// Int64, Unix timestamp for the last time borrower opened a loan
	LastOpenLoanTimestamp string `json:"last_open_loan_timestamp"`

	// Int64, Unix timestamp for the last time borrower repayment occurred
	LastRepayLoanTimestamp string   `json:"last_repay_loan_timestamp"`
	TargetAssets           []string `json:"target_assets"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryItemPool defines model for DepthHistoryItemPool.
type DepthHistoryItemPool struct {

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8) in rune, the total value in the pool (both assets and rune) at the end of the interval.
	// Note: this is twice of the pool's Rune depth. (as pools are symmetrically balance)
	TotalDepth string `json:"totalDepth"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited to the pool by member.
	// This field is same as the `asset_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total Rune that is currently deposited to the pool by member.
	// This field is same as the `rune_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	RuneDeposit string `json:"runeDeposit"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited by the member
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime    string                 `json:"endTime"`
	PoolsDepth []DepthHistoryItemPool `json:"poolsDepth"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters. It may be -1 if
	// Midgard is having trouble counting the results and has to cancel the count query
	// (temporary fix). Also, if new action parameters is used it won't be returned.
	Count *string `json:"count,omitempty"`

	// action query metadata
	Meta ActionMeta `json:"meta"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// BorrowerDetailsResponse defines model for BorrowerDetailsResponse.
type BorrowerDetailsResponse BorrowerDetails

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`

	// if this is given, the actions for the next page will be given
	NextPageToken *int64 `json:"nextPageToken,omitempty"`

	// if this is given, the actions older than the timestamp will be given
	Timestamp *int64 `json:"timestamp,omitempty"`

	// if this is given, the actions older than the height will be given
	Height *int64 `json:"height,omitempty"`

	// if this is given, the actions for the previous page will be given
	PrevPageToken *int64 `json:"prevPageToken,omitempty"`

	// if this is given, the actions newer than the timestamp will be given
	FromTimestamp *int64 `json:"fromTimestamp,omitempty"`

	// if this is given, the actions newer than the height will be given
	FromHeight *int64 `json:"fromHeight,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
