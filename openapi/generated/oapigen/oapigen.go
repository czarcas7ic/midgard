// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// action query metadata
type ActionMeta struct {

	// Int64, The last action event_id that can be used for pagination.
	// This token is needed to be given for next page.
	NextPageToken string `json:"nextPageToken"`

	// Int64, The first action event_id that can be used for previous pagination.
	// This token is needed to be given for previous page.
	PrevPageToken string `json:"prevPageToken"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BorrowerDetails defines model for BorrowerDetails.
type BorrowerDetails struct {

	// List details of all the loans identified with the given address
	Pools []BorrowerPool `json:"pools"`
}

// BorrowerPool defines model for BorrowerPool.
type BorrowerPool struct {

	// The asset that the borrower used as collateral
	CollateralAsset string `json:"collateral_asset"`

	// Int64(e8), The total amount of collateral the system paid back to the user
	CollateralDown string `json:"collateral_down"`

	// Int64(e8), The total amount of collateral that user has given
	CollateralUp string `json:"collateral_up"`

	// Int64(e8), The total amount of debt that the user paid back. denominated in TOR.
	DebtDownTor string `json:"debt_down_tor"`

	// Int64(e8), The total amount of debt user is given as debt. denominated in TOR.
	DebtUpTor string `json:"debt_up_tor"`

	// Int64, Unix timestamp for the last time borrower opened a loan
	LastOpenLoanTimestamp string `json:"last_open_loan_timestamp"`

	// Int64, Unix timestamp for the last time borrower repayment occurred
	LastRepayLoanTimestamp string   `json:"last_repay_loan_timestamp"`
	TargetAssets           []string `json:"target_assets"`
}

// Borrowers defines model for Borrowers.
type Borrowers []string

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryItemPool defines model for DepthHistoryItemPool.
type DepthHistoryItemPool struct {

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8) in rune, the total value in the pool (both assets and rune) at the end of the interval.
	// Note: this is twice of the pool's Rune depth. (as pools are symmetrically balance)
	TotalDepth string `json:"totalDepth"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited to the pool by member.
	// This field is same as the `asset_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total Rune that is currently deposited to the pool by member.
	// This field is same as the `rune_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	RuneDeposit string `json:"runeDeposit"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited by the member
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime    string                 `json:"endTime"`
	PoolsDepth []DepthHistoryItemPool `json:"poolsDepth"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters. It may be -1 if
	// Midgard is having trouble counting the results and has to cancel the count query
	// (temporary fix). Also, if new action parameters is used it won't be returned.
	Count *string `json:"count,omitempty"`

	// action query metadata
	Meta ActionMeta `json:"meta"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// BorrowerDetailsResponse defines model for BorrowerDetailsResponse.
type BorrowerDetailsResponse BorrowerDetails

// BorrowersResponse defines model for BorrowersResponse.
type BorrowersResponse Borrowers

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`

	// if this is given, the actions for the next page will be given
	NextPageToken *int64 `json:"nextPageToken,omitempty"`

	// if this is given, the actions older than the timestamp will be given
	Timestamp *int64 `json:"timestamp,omitempty"`

	// if this is given, the actions older than the height will be given
	Height *int64 `json:"height,omitempty"`

	// if this is given, the actions for the previous page will be given
	PrevPageToken *int64 `json:"prevPageToken,omitempty"`

	// if this is given, the actions newer than the timestamp will be given
	FromTimestamp *int64 `json:"fromTimestamp,omitempty"`

	// if this is given, the actions newer than the height will be given
	FromHeight *int64 `json:"fromHeight,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetBorrowersAddressesParams defines parameters for GetBorrowersAddresses.
type GetBorrowersAddressesParams struct {

	// Return only borrowers getting loan against this asset as collateral.
	Asset *string `json:"asset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x963LcNtbgq6B6dypSwtAt2ZYdbbm+lSx77Pp80UrKfDs1PZugSXQ3YhKgCVCtTsqv",
	"tS+wL7aFA4AESZDNvsiZZDQ/JnITlwPg3HHOwW+jiKcZZ4RJMTr9bZQTkXEmCPzjLJKUM3FlflM/RZxJ",
	"wqT6E2dZQiOsmjz6RXCmfhPRgqRY/ZXlPCO5pHokrEdSf1JJUvjjv+dkNjod/bdHFQSPdH/xSM88+hKM",
	"5Cojo9MRznO8Uv+OeKGnj4mIcppBu9PRWyZPngSIFemU5IjPUE5EkUiBUiyjBWVzJBcEzektYWhGE0ly",
	"EaK3EqV4haYEfX+E6GzC3tN4jvMYUYEW+BZ65byYJgTBtHYYOzZmMVpggSRHEWYRSeArNEWfC5KvJuxA",
	"kjTjOc5XaEbvDkN0lggeIDpDjCyR3haU4RynRMGkZi4EiRGVaMnZN1IBlxNZ5IzE4YSNyg0RMqdsrnYk",
	"JRIP28/3quWXL8EoJ58LmpN4dPqP8mjMQP8sZ+DTX0gkR19Uh/pmXwFAav0IzkXttxkGzXju2WoF5zlO",
	"1CZthU19azPj+gDVS0BqGkyZOr6pboxiIjFNNLjYAIvjOCdCAKw8z/mS5Be62f5hro8/DPaEY4ZiLLGB",
	"WmQkojMaoakZzYX8/mD2QlvhQaKpYFq1DkYvFwpf9g6RHtYHzhmA4+ydAinBQiIeRUWekxhF0BlRhqYJ",
	"jz6hBaHzhQSaljQlQuI0U7BfkEwu3lAheb7a+wrcwX3rgO8AU5bTiKCFbRqMXuFcrUzcF2iN8X3QEdPE",
	"BesNwYlc7B0aPWwfM1pACyQkloWma8PNFVT/yfiSXXJ+D6RcDe2D7mOLij+p9ihTHZTgMPCmOMsMP39H",
	"Pxc0pnJ1XyfbnMAH939RuYhzvMSJFnMxybigsnbU74kStvfFImujD2SQdmEoy/ktjUnuZZcpjFyt4L5g",
	"H8YoU9s2GH0gcsnzT3sHx4y7RpS399P0g00E+HhM9r9ZMOrmsPGYoKyYJjRCn8iqhFFR4t5BVINqTBxG",
	"4652wRkBarfAXUssxb1ACCN3gwmfayCFFiZxjzvWI5/5DMCw26WguSK3JBfk5s3Hqw843b+y2Bh/IGPB",
	"KKFKd5gh2xEx1bvJWRwN8hrf3h9vdAcftgKheqzhhjDqvekTtdH7dZ0fmSNp1K4D9Hpb74V6NOUABxmy",
	"mfOET3ECuPBygSkrmc/1Emf3tn/V2F7qXuJMm54BuuVJkZIAzQiB/RQJzVzBbZH4vtCzMf6wTS0py4ek",
	"itoA8r+9u6/9rYb2wXvDJU4st8rkQgRIwk9TzmIRaLMBfrjFSUGQMilIXG36l8CA4ThW2l4M4w+w4gOn",
	"nM3RksoFykmCJYmRzDETlcle97LEWJJu1whmvLJsFFWBmQa2D5ZouaDRAn4yQCyxQDmZUyFJTmKf40Fb",
	"TJ0TGoNqDxNR5ptkygtW35Bql7gzwSgY5nO6qUbyOZ5SIjHQ+Vrdz7T7Eox44dmej4X8yqCDsdEGBCQ/",
	"ouyWJ7ckVpawf+bWeTTH1zaM74xiRYtEIDpzT5wKpBaRELVgnquvdvncuzk4J0hImiQTlhEWUzbXvjDC",
	"inR0+o+RKKJIyd1gZD47bqwm2E0gb1YZqRxY7qBLnI2CEY7j0mAaBaOlMYxGwSjmTBFcMMrJrGAKc8WS",
	"ymjhmbzhc9MHYlqV+weIrpEm0LRc0piDfm0HXTBy3HtdPAX8kagcpck6GLmTl3hObvgnwjpJ+sZ6Ucyg",
	"5JYw+RONkVxgiSLM0JRo/6Xi3xmeUwasOEQTdrOgyuD9ROD8GSGxxvZp6SvkOVJgqH6kw9eZ5eR2GJgz",
	"mg+GMye3lBfCBXggvG5XP8yNk6/vc3NB3rN18O+9w4Pq51eavqA7de4MTsE5zWeOrVyAtoWFoHNWMSCt",
	"FiLgzaJISj5e9psw4xMYsOoGdL5lWi9ua2URp2wtA3wJjb4EHSJwVihju5R9B0oWChIp0Y0EZRFBRz88",
	"Gx/2yCrrgy8dyILhTCy4BPF1ixOq6J/cYcXWRqejH56cnDx/8nx8NLb/20SCrhWdm4Jz3AVD46BKdmPY",
	"j95873kpoK7IEuexaB/atPrqlSBKa+r5nIER3/G5AbI7VW3g2jDeJXAWvycyp5FnBcriwHOiOOstUS07",
	"aOqAPD8M0JluDdqgFSa3BDFwbXgO3ox+LTGLp6uNhxe6X/f4quEbnMcvcdY78Bs6XxAhEZnNiAYZpgBW",
	"3DV2iu9oWqQDd+Y9vqOsSAfvjBl96M68182H70xKYorZUOCh8XDYoflg0OuDr4ecsk32Xe36JvuuRx8M",
	"fGP4tdCDcTQQ9pvSshoCOYw8FO760GugbnCa5hICD5PwIJjv5HxUVKdaz7q8bMOHdd7T9JKWny3W7yZb",
	"rLHDnHhHhSxNV8fBnXDMBKIxYZLOKIm1QVvdEVun2UBbx4J3aXyqdWPEq2j3rRKG8SgdibJHcpz8hIUg",
	"HhGtdEz4pHVK98pTa5ZYGTl2FB/eOnPEfMn60XZBjHuh0uCq/jC7WAlJUpRhqrSC6JNV5ApB8jXTF9lu",
	"k2MJs0AsBJypb76YTCUs9CfJ843nU72rnYbZypWGKCaMp0p112bszcersBOEItseAJiXCou4An4dPL2y",
	"nH7iGWE/KZL4qbpl7tLWf2T0zlFbbWgFWGDq5wrj1KgK54DYOufOSYZX+58chk0Jqy7XvWwa53MiNTnV",
	"A4EaVwOKbUBbTV+iceyWuDRGQMOaqvvq5k346ubNKFjnt2iwihbJN0Gu408ToZsE1abvHgToO58+5tW3",
	"j7aNw1+rTZJTNj2a/XKcfP7leXybP82KdBYtomdMJrPP8fHtya/x3eflL2Q5e7p+I018x1tJ0jYnvS+D",
	"DMI3XIT7arZXz8zbmVm+EzahLUPj5aoD8J0O9zlQr0iWE6FGQRjFdE4Vv4M1sWhlGF/LTWR+7mOeWiie",
	"QUMvG+wQqGfQjzL08s3Z2w/h9d/fn398p9hOiuXaDbUUa+Dz7qj1IwzbULVnnr2sBey0kJ0ySfJbnIhN",
	"4n7elp0GBvO5nb0hfTBI4EDj2w8/CEP3p9a7A+9abdpGtjo2aNaLUuA6LiVxiSjqZ7iRMeKBaKVe/WmX",
	"3ol/lzmNPHzpdcKxDEywldJh7Vx5wUiI3oYkhD8tOI9Mi5Jcemb78fqic0JYSmvSH68v0MEUK4HH9XJj",
	"QjJlr6svaumHXgojLL6hKen1jxIT56YmnBbRJz1jURP6XkVimKOxdFmay9ztjyspbmnnvt24HknwZJr7",
	"N8pichei68+5PKiwDH0Lpwd/Hz5quEC7omshPOdlb9jxhzLsuBrTdNxh5SWoGxDHlULO7acUEudyLe5M",
	"yZwyHVa5BQaJFZOL6yLLklXnLNeqDRLQaJflqGH6EVXPtCuSFr1zaKeDnuOgggl9h+rUdDgQggEe9+og",
	"K3YQuPzWRa8aT2yyrBbJN2iitsv107X7Yoh4rRSSJPWb45n5tXGzBXyyHnAOLbucROuIyTJ6TVTudb57",
	"LgdTLhfWNsEshi6HPccVTtgHLskpkgsKEf5yaTi9HfMboQkXQgtCdICFCRCFi89VmoKXGifJyjr8Dwfg",
	"gN2LaunrTsDeINZ3n7D47L4FNXxSzMQgq58ZExa/u7wPwdOcvmNyHdd537JgIDBX9yseBp/I9X0w2YF7",
	"cH9qTnFL37IoJ1iQLbUPRE1/NCVySQhDJVMGttG7r6AMXi/oTL7jQvRCQNOM5ClW+jlKuBDldLK6Bmex",
	"dtwAg0FKw++U/vsldRiy63AnrNwR/y7A5z1QfC8UaAgQu1H+/cC0TwawOzS7s4HdYbhXzXWQhtWg2wYj",
	"aZNY6ygbSO9Bv/Z+Bw0R3RAPNbnZkmNNHu7TEZq5QNs7Phojbez7aPYH18M27o9OQIZ6QLyQtJ0gvmae",
	"YIP5Bx6TDvYyU7xeYbANA6jI2b0bRXGR21Q3wO4+g2XaCN9Yd2EKbtBct0ckpVKSeLMJOQTm2e3onfN6",
	"ofRePkNlgplQwk3yLRZKBk2o784oi3hK0JwwkuO+BULqsFLkFdcqUsRnE1bx/Bkh2jCo7Vqn/rSRDlOy",
	"xc2cNTtuuzZGNtn2cubXhAxBsPruBSji7JbkJiD26scPrwK4ciRR37F0qFL+62q7JVW8OcHRQgska1M2",
	"l7ktY/DfVWsTfDPfIMjvXpdgvyG6T9G5CS4OEp51pGkwKYeU29zEh+pBna02djvoiQ3oOsHW9sB+kxoi",
	"9RCJx/f9bjCZNNhLRQyOIvWNQOXV5VZ8ULs8ygVRBqSHDuD3GqzoO8vXDrtobjeHTT5ANgFwRhhaVnUA",
	"Man0lhwiNQ/+RBia5TxFB4zMsf5QKZ5iwrAT4KqdK+r8qPxGIGEZoqjJB+ATgJt+elJ4tp+DVQv0Uiy+",
	"JbnB0gEHqpO/9I46E0xX5U4ESCz4kqk5DSKdXV+/uvGvr40NiisNgKOxVO2Yt9hUMKL+PKwAdIBSGzHc",
	"4+UhLd+pdK6kscEVMjpk5OMbJknddweOp15Hwk1eEJQSXOavr0D0MX1AkqOyazndlPOEYKbzYq5XLBoy",
	"aohe40TYH50yJ5BVgSJbJKXIbNhQtMCUeWdNsJBn83muyInE6xP36Xwhb65tz5c81drjph1fExktNu92",
	"s+C5EgKb9BMRZozkb/rzm2CX4L5cGk0v8l8CNpDUOdL6ROWBNiCvr7+5ja0D8WOmWV0LN7vCIM6dohjV",
	"kpQ0m+ts0Z4IIt3XCe+oh3aQjEeLQ8+gXVES/cEwTgEGJVbjmCowcHJZW2dbINqojd9G5zcvw/Obl0pC",
	"3WKa4GlCHG2tmqlVOGF7O7g51MaGcGuArS3hblCGmsJ+WNrqrrdd2xiOtS+jbP03SGcdIF/MnYzJS+mz",
	"3ybsgjBupazSqQthW2pdG0s7DnTtUJ3d5LCXAytTlaU0eqBbN9fgLeEzE6/AYhNXYKf37MHBmk047Ibs",
	"ypWug6Gzl17rj+tr+/8dp/o7LsRlziWBXLJLTPsjzDPHiWmTBdU69aaYOLIlFijDK6WEkQgXQttTDUf+",
	"hGXltB1bwEh/MBYj0tG6ogVmc6V4LZ3qLt+XGHG4oWH9x7ZeN8EGu1/AlzZlR7Yz25Ed2XH6+JFtM5QX",
	"lWNuSHptxB5K7YN2o2/KHVifg/YDuV9tzw/D7QMvOmRaJ+/0snufvPEjp/eE1nG11h438Unzmwbh+1SK",
	"eu2mnRNIWmWd9phOokHdMZnEGcQf43gWxyQeyjLUEqpEXOCKU3uT2BlieGaW3eF0Mbuio+eN4b9mxAst",
	"FgZDDWH6VFibKFk5kt27FptkPaMk0cYoTgnC2q3+Mwz6kxniJ7hX/9k2VbKD54zHJETvMWXJqpbUPWHg",
	"Y8px9ImyeYBS3eSvOV/KBbokeUSYxPOOm0Qd/mTqCKyPdAbH07SQiHF7cisiA6jgqWzrKTG/LhfmTh64",
	"UoZpjnCe01sieuCwddjY4GOoGCy4vYahUIwleU1z0YuonTkhOsgAmLi5765OnjLn7Lumfoe3nLnKRtl8",
	"4oGRrLB5zWx5wPUpSbgVYL3k5PeGKnaBciJKbRH8xzmZKf4meZfGNZSVgEzbkJOY8f2MxA64AR8xIYYD",
	"2QhMsGcuoiD4PZgIiMgBPATWvDkL0aS+nocoMDZhIQ0VbTAH8fthXXRqiClPVKmLLA0R5GJ+4ErU+kY3",
	"eHdz+S2W2uJ7TW7ULev7Mq/em9IZ95931V0PpFa1Zl1xaF+FkS9lWZu1FfVUK7cfFM4ZUM3M7VOW1VnT",
	"zx5e1dfnqLMFL711yHW6tS/z0BYldDI8BILA4ClnsWZ4cPnjhF1om2B4rSTdtSfaoxVMti7/vRnK0Zs8",
	"7bY1URlOCYz+vOuqaRXPcXb5907T/1U4D9E4HB+hF+joLyF6JSRNsSwjn2GSQm+sHq26eqw5CYwsmLCc",
	"CJLfEiToryRAJE2pEJQz1eCWBNoLL1BGcrQiONd1kxXn0hd5MxxJnqMXE3bwX4R8SiAF/i3c6cHqdM4a",
	"+g4dHf6fp8foe3TkZ6ol59rT4n11a+sbMWH1nUB73oiS/M1u6AtfpaAQsE6/PT5cvy2M3EnIQ3wzqC7c",
	"gb4z0b6IMtMTCkBBhmXYpUlByQSo0gQU1JM7H5haOaktAm5cP9rRVA6DDmwR8O7LbIiNeQ371nHk6B/j",
	"MDz6p5lTDWx8fbakv+RIZAmVztmaQF3P+WMWTxiQfDhh7y71uaAXZQjWt6gBFfofE1bhMzp9gZy2B0fo",
	"+2aHw053mq0OsROLdEtrbMojTd9NmGStkkeABE8tpaUoBXybEtgYw02Nm9FBt5677ooQhqpQlIH3AjwG",
	"ITo3Pl5jirNYNzKx4iaMDLRWzYEomzByS/KVTThRSvCMMrjYOnSzU0yHDACEoZqE27euK81Fehf10nAc",
	"xWkskZp+4Vo90BUvrXAeVxY38K4tJj1I0T6cxrLaLKmbgbSpvCbiGkz/n906hz/e450pH8xMRW0dIigE",
	"j6it+oiZqVYXoo+MuC3BHFrgfG7q1Sn6mjBfpcTJ4IqRXfnN9qq8kQEUHz99evRDe13mg1OIu67uLnie",
	"FdMjHMdLlpHs8/xuGc8eFzkZZ/OnM/Vbcfd4lf7AxifHJ8+STzkRT5/8uvxl8SR6Pn7ynPy6+OXp+PjJ",
	"55XXvFTE3mmuqo9g4UEkg18bX/D8aHy8GqePi0zOx7e3RUxWi/E4P56xX5+Nl5+fxc9Xz9LieO5llSTK",
	"jp+efDpqT15++l12pllz0NkmF+qgPFcvPoO+OfQKGPDGg09O5fS2Ms5YgZPKkr7yloow+tRZIjiKcKL4",
	"3NnlVYjOoLephIeIUa9ilFBGcJ6s0IGypis16xCs2QnDSi2iXF8vrTKTVlc6kx6PEc/R0XiMYrwS6CDi",
	"bEbnRY6nCSkjpvQA5bM9wYTFZIaLBDwXj8eHoVX/jkzEzdH4L6CJJSsDcDhhF4Xi4uitc+v3jgsdOQzx",
	"+EInDFrxhWwAWwC+Au3tdnpPGHSvnPrALI7G4+/UUmwOWqC2gUnCYjuyWPAlen/2vw/OLq8CNO685LVl",
	"Gzq9xbtlDIVfN1c//FdJ1t89od47LANUuSARTXHSezWqW6JYN3UuB50wSUFkiA7e6t9KvWUy+v5oMgI/",
	"lUbz1ASWxZwI9o2Et06qYeoTdarafVYVoKmHbSi87faA7ZokFXbGYIqzy6tulqU51NUGHIrnptb9vxqz",
	"MkdvgDNjLrAAl+WKKP5EGMqVakLiAL01nkvgLb+SnCPKhCS46w0zPW7fOdlEAcgvt+XVKTOxrbdqPT3H",
	"1E9bmqKsq9cuEsZEfMlILhY0CzusJW/l6xudziZrWd4BImqjz2yMWYCuFf7G4b6rJIT7rYUQfqWKB955",
	"9FsGx0/W06/J19dhNsokXOKsXAeQy/GThda0Y+3ZNuFHtTAAheuKn0dJERNh0C2lijHkaNplKHaUI6qA",
	"37b2gldHqvikUzu85U8fUJahLiTqxFInSpff+bRF972XoTqj+6qOX3N0X7TZS5ygvRsy7zJUJWB+MrFR",
	"p92RGjsE/w2athXYsWsE4Gaz9q5z0/C+QVP7417a0z+YCQ9mQu9N/p+/opct/JvQrGPGkyfo4BwLKlDG",
	"KZMiQOPvoQBigJYLkhME/3hxNB7/xUOfICtPnVn8h/sHiYrd3aT649gm96aVegde4mwzSacRC1SzTrGm",
	"2mwhU5yhu4XHLmr0frVovxce+NvZ/VD3hDW3qjlb190AtNvuoJ2u3UOvTYrsHd0m73UMvgMq1UNoPRMo",
	"6vtqp9WYrOuwVLPtzqrq2Tnw1idVdu4ceodzqgU1+++2tgbc9vXbvJ8LMqQUkB08IezATmA0q/9QzODF",
	"5ceP7w6757he4izrnOSCZDmJMKTIQqIyTpZKCx1/LUt9HzkS600Ef2D7ljkPw6frpIgNkx6Gz9iPzhsk",
	"Pgyfsmu6DkdG6WXod1Z0uTi28U20uHGd6h2loSGx6jzRVVq81OWVwj5eX9fC67Ksxi5dDjTAg/NnyQ1p",
	"c0efo6gRLtj26sxmNKFYdl/sntkW+n1TE5BsNFp12AEiaSZXiM6ghXnHr21T2XFeky6q8otxV4q/OBr/",
	"5bCjbjD3ZeaXd/XK0uYWbB1qWb1B6Ev0c6MLBrz2DU2BnLHg3vrv6vcykr58w3Dd+3XV4OXYZrWNLQ3a",
	"Z+lHiMaLzN2BtbXHl2vX6enK/LQ2tqj2dPKumUnmpmBvyUgA3I65SNUY+0tFMqJf37XsmpCkR/mdE5KG",
	"zXhFYqJT1AdNaNIHcuhF4ip8fqON20vKz9AZv0LiTwXK75L+0z+9PzXnZkGQPz0H50Sn6EA8KUcHnIFb",
	"mAtiqqQpJABfaZEZt9YC3xKEUcTzHB6tjqsH2cHj13lt2e9n0CPskpnUUz3HiReqIGmkXrgk0krY2Eeq",
	"Rf3J+O2LbdTG2bjSRq339u9tdAAx9LKs3r2jwEa7ka+Y970VTdDicHDILuDv7s8krI8dqF71MvWPmSu9",
	"9T3/NnOu8QPq4WuOQCdaYcP6/v8yFW59t8KlqeVsy1oa6Cw2f705GolGoeWBRzuwyvj1PWNYVQ97Xa31",
	"eyNdwuItsXk/u6xLGt/Pwe+htvU2CLAxKMPKod/36yxqjv2gwg77PowTNY+mBr0Hp1rE7OB90OQ8Xv4F",
	"8ShrEy43rgSl66KVBxfus/xT5yR+HIsxTVb6Vdofhclz3cX7vP2Vcetdg+reV7/9yQvZsYiUM7nY6zKG",
	"XdXa9Lx6JpDVa0T4taoohdtd3laYqWPnDnQYHJgrEGlyOAhTy4nWRe0NmK8Rvtc/3+NxvMva3Lkej+Nw",
	"h7tqfyyiZ85G9OFAIhVLCsUg16akVXEDJvgaQl1sd+0uIHl0DNFMU5Id67CYzpvv8yJnm+EQTKGvxCX3",
	"r7FztveUyS1m03UkuL3XHzDboBvv3rl0nNKwudZf2Hqn0lNsson7v0vctr7YMBG3TYmv7hkG6BXuHVWN",
	"plrFwmvXTTUG1+A/9fum/oupOo63SMwjjL2ireNay3tJ1LrFWXft03er1KMoLXG2B79NNcrmXhun79al",
	"Ub0ADPbYNCHw+GsaTTwPg+w31gTC7yAXlsTIDA75xVC6+HDClLbeug5V5Na4DQ1Qib3tX7VP0Pk9nLBz",
	"OjfMDNyhZcqzhgZhgUSKk0S3+R0Kfv77FLP0HdzekMvilEiodtPDeU4YSLDcCEuAgEgamcyyDbGjY+uG",
	"aQyRVYg6gNFT9E6wNrQIrkbqxfxh/Y4w75r9wEQmH65Z5AAR2dQ+e+d19NDcpNJ7526R9tfBnCa4kmtF",
	"dX+Yoxc2EHc6wFmDO3qKfWBP1/xDsEdDsS3+dM08AH/uKdh1MNfZI68ZZC9U2NImv85nWoYGyG7AYhqM",
	"ZbfI2V6mMpiV3E8g7VpMuAfeMcSa8yFCDZQdwm8H4EEHi9gpMNeLBltwhDItoLOAk0Np6DvkbDf6DtVF",
	"vv3B5eRbRwc7dFhOa/5R0wPqk3YHPFdJCj2zTliNEMuJy382xH99cvPbQWPjD7f2r29hvDb2vpb2sSae",
	"s6HZ+KRVfSN7IzDrylpbANdjNAdHgHp1507VqBkxurZudq0q4p82NNJ95m3w+162AJJiykuc1d+S2j0A",
	"E8a8j/BLNbBfwvVsY0eiiIIRBFtWRhN3+ahv1G71h8qllNG0SBEvZFbI8h21jEQ6lNEGWfmRpDcutHbC",
	"zh7UYFsfLmoO0UcpNhS0M5KTMJlTMjCWE0pE6ZRauSC0jE4kAnYBm2hOO+nQcE7b/hWT+crn/yF3Gc17",
	"bP03H69eQvWqqfMak2LsOrCsjIfV43hFD9SvaM8AP38jYIj918ZqIIeGoVxuUB5O38nqTfPds3bUubfc",
	"zuxW4wGzakf0h1b/vk6N9dhWuCes+eZv73Z3gFaDbOz/dLpu7f70TT/U+9mcv438jRZfNVINrmPL+9xB",
	"C4LWf/o3XTfZRK2M4aSAIo7rgsqbNSvVZPAo3MGUy7KksmLBptLjYX3VE7Y+RK6C6B0UCBpyRwvFrKp6",
	"QuXbh64zBQrMk88FTgT62ak6CVOBmi5xojcBfvo5UHoKhboSU8qIqL9jMmE6VBjeiIY9sNVvTcHX/rXp",
	"uXvWZlV/d9dNiVC9XLPl+n0iBQWs01YtdZLDBcJSb7wf9T5wSU51/QkqkFwqjAYz3D5HWD7xJRdW2OpQ",
	"iB2sksY++B/21cTt5WqVCtivH4IWHgyVP9eExbWq723BwykbVJgTmLy8e3vRDx+FClyLEF3zlLhlQAU6",
	"EEWkDhj5qoQKlOLYRqZMmIkMAGw4RCle2YB1qNsFCDPktADeSiba5fpOoFXE3ZOpskpTYhSA5oW1rlN3",
	"8P1ROEaTYjx+HL2A/xB0FI4PA0RZTCMsiUALvlTrWqVQgxYntfITOEFLLEI01sVXlPEtochL1d5PiVOl",
	"sV+Cwr4Hrb7S5YG+SmKtKo9NWJngsWFZjk7mX72SqQlUV93gheyrvOEEYO1QdaNi/83UhZyk/NZNmzGh",
	"nVg4TzTXT7Aj/Gsj069842v/5l+DRFppsBWa17EqaNhT3QfcaSJ9gfeBZ7APEWcSR2ANkhRqaY1iciv+",
	"Z1kdN+S5Dv5rZcHYp4IvdRnbs8u36HNBlPLuWCfwwhpbWTMqoUwJ01uKYX/P6Sz/f/9X6MLXWU4ynBOB",
	"FGx5quuv46nCPF2PW1c9llwnUuGYJitUvsoK1pipqFsIkosQ1BgFVYZzZa45bA6RW4W5+nl/hVJ1gJUi",
	"pwVzCoIPdJ3vhV6bfaNXAZLiT/qFuu9jkikmz2S5BwSLVVhuUsyJLoi44EmMopxKYDrOUkN0w7X8xJHO",
	"23KgUuTFI54Eem1ILHiRxDDXStt6PCYopjmJZLKCCBoqwVhrn9IoGN2SXOiDPA6PnoZHYA1mhOGMjk5H",
	"j8NxOFbSDcsFIPWj2+NHRj6of3q9B2A7WyGCIcfIJjzSHOUk0cWsHVETojNb11ppCHPCSI5NAh5nBPEc",
	"pTwnE0aZR06V2ZQUSlERmyGLnKJQskHWGiXsD3gFr0ZAzS3mzuiXjCG6gsYCEr0yPKfMQgu6Ep+hp+Nw",
	"wl7TRELwOV7B6zxZllBdxluflh0O+JMSbHD6b+PR6eivRJ6ZbVa7b2qDidHpP5q7/ZKnKUZCEYwpWSZk",
	"iM4qr57QKgdXWx/RjBLNVxUpUvYIaMrZHHM8E5sYh50SStu+UKMM6REsGaoJpqQyxOF5a8UTPcXAvgQt",
	"4XDRhPyuwicX3hqwx69Pjp+cPH528ero2Q8nJ0/Pzx4/Pj4+f37y5OL8h9ePx+Px0euLx8/On7waXxwf",
	"n43PT169fHVy9vR8/Oz5xdn5k44VyDsIfdoA/I6jYqtGKqpbBsscy8HLN2dvP4TXf39//vHd4YSdlaI5",
	"WZl4mgAxbv5QnItxuGCZGRx0H62yN14g4R81JJuonTVQuR7jzNZsE0WaYqV0jf6Xg8YaekUQjFC5ILmp",
	"iskU4kHpNFvuUumKUHpdQ6sB1Uno8yLBvomu9BeUFomkWWIfSYATCdHBAt8q8xRLlBAsJDIAACHr5x0O",
	"nYnNQ96BYpbh1Y8fXo20GPQgqS1sMfyMPzrMI2qctw7AQ2oMYd/s4WzCDsrDKIPoglLhCFDMGRQI08n3",
	"gQnMPWyQJIxRe9CpA23VCjZaUnVf0LgrsLipwdfgNcHazEPoPQQ7/WZQs9rTSEpO6GKJJA6QU2Dx6bhj",
	"2oSmtH72Wj7rp+hPFFdI8R1Ni3R0+nQcjIyjfHQ69j1Z34TOCA21fXw2E0TWgOqCSTddA9RGcNBZaZeD",
	"9zpwDlaUzn14ACVTxod9aQ4ad0CpWl/iObnhn6DNVwKWJ0rMyQVm5WvBOg98CMyuC+v3gde47YcAu7Dv",
	"lHxlNMhyckt5IYajgurxO6ACI8vtUUFZATdfHx0aMG+ADgrgN7uixD+V+BUZZ0LL/OPxuMuILds9Mirq",
	"lfkB5GgltM1XpOwB+KSMhylOMIvIo9+MLPnSaUboivhCX71xZXyZh6SM9KnVTimzCcuLyerQeT5hejsD",
	"JZpNS6U1CqnMqUj113dndFZqL1TYd7biEB18ZIkxRWYT5g5tD8roV+X8AZh4Uy4X4eGEWecwi8HZg+Bv",
	"ZavGCEpDUL0k+zIC+DSLDOl6wWoH+FIgKjsshXO9p+ssBfdp1nBXIa0sQp82X3kyZF6QjSR2o3wHFkiQ",
	"CBzfOmnj6IdnY3RAZ+W5lK/EpYXQz6JOSfnx0F3h0cn45Nnz8fPxeCf2v57Gz90r2Dqs1crWgns8hv9t",
	"z/33Q94GrzrI2775ZSha34FXxYxKgud5zpck34TiGcL2CTkhsaRC0shcspuaSjwjDCUcs9oDWeAJMPfw",
	"E2ZnLnG+g3pMM1NBfg0RWcMaXD4yWiA7SwBg155Rt4w+nDBtKSkmgRMBbqvKlCmjCIwrR7ERklUeEG1G",
	"HHwTfNNUrpUV/svdbHE8f/708+PbsYw/Pz2ZMXJ7d3IX3cmILaRIo+LkSRpMo6PP0Z0QK/Lkl5Nnj8eL",
	"Z2QxJ3P8eL5affpULOfxPE2z4uSY7Y/Ct0O62nF0yRbbCtnQjia6ieFYBo5P8/bjgjSjOpT8tWOGYHib",
	"r8rUBeYtFnzJEGcRWYNhouy8llXrQvQwfDk7mhMpFZQK7xGeY8qE1CqFwTsd4IklyTFk925n0+50bOsO",
	"rKEOwKuK68+qFtmCWdyo8gRvSZbvgbb2/6WeZJtl6a5dHBA+1hcU86hzNddLPJ+T/NHHjLCzy7focTi2",
	"CkOkbcHK8xnzqEgVMN4VXfCoaz2NMmodU9ZnEo2FXZjJsb3qwHOFpaNrF9jRP+2aFwQnOkZiHcHpe4cm",
	"xen+yK7GKnhnl2/DCXtPMDTkM3P+4lTpUwkW8mbBc/B2f4/eaW1O4wlcBWU8N/zTNgttv9dEJzY3us2I",
	"k+/c6vSSpymVst0tgg+VB/LivHylfVYkycqqmPq99nK8M3v53Yaj0QsuTsrWHTzmjT6DbXBcd+3Acf0R",
	"vWUzXuK4LRwLF/bi0W8Z58l6qV69SG9jCfSNvzBXPhT45419OsyeoS0SIkkjvgWI3okymDATd1Op2Qss",
	"kFxylPKYKLT5Fv0XhcWYKiMlD0ZUGveQQBiZ6x2FhjQlJtpFhOg1xK+zGN1wFMPVsTLPJgzBNZR5p9lg",
	"QTkHXB9gNWBoAeCF9MGAlZ47TwjME4Y3HAmCc/02cEZypeRZHYfc4UhWTFDA8tXwdthTlHEh6DSxu3mK",
	"nqaUBWjBizxAMV4FaEnIpwBBqnCAPhc4l0qLWRGcA6SQkHCK/nEUhk/G43+G6ILMIEql8qyVgWEhuuDs",
	"G2m1WWXPlAuEV0eE0MnW3wJ1PZL8FPHM3C1TJgMdSKT1fVjMpQW/EHhOzCWPc9rf6goMR/pplVP083/Y",
	"jy9ivJoU4/HxCazgxdH452ZzNCUznhOkwOjrqP8l+Yujk/Hz58dPT8Z6LPCH2bHwTB2eWtaQwVS7F5U5",
	"AsNdaJD0M88zi2SSG4wzjkHQOctqOXCLGqif3M+ML0OFjx+ZeYZG1158Mh5XZ2WqE2pf6Klq/XMb6AaY",
	"/o2YsMvKjQmBDObM4LDghZxqB2zcLEOFsIzfQoFSInFooncU+4aQE1h8RR7u29/a8V/Dk/JtnepSUNGZ",
	"XRpQvyYbQ1VKcVAWPdD4TM2izq+28B9+6MKAekdUMEkTtfueIX62WG8ixvQROj2YvQ+sVEI/j3eDCwdq",
	"kIpxWgceFZbB2OovHj3flHfcwYwvCV9hKU6iIsH2IrOyXGLcdT/hFNSrJiWsSJUConjYKBgpJgaFD1Q/",
	"xcZsyYNRMDKMbBSMFCdzYh66If7QZmiQoKQfV0LXpVlmabTkie6aHnfY65FNfWluYY8b4ZUTsaqQ3twX",
	"i0a8ZYjezrSRoEms8iy2mULDHWKQucMdwnf1g1wDkg9YwiZeGkVEX8Pv4dJZh1oETYClQUghslTZVJHs",
	"K/5rtaPyuX8diWKzKkp35oOi86DoPCg6D4rOv4Wi88oww4G6zoPG8aBx/LE1jgbCdygdtlWnttF6yWet",
	"2lEFSWs3TFkHVDENfcMKW+oIpLczHXlOdRRrpaJYvcK6zSHD4kFdeVBXHtSVB3Xlz6yulCGX2/pmNKMF",
	"rwyynFkUaS0XTtGuodeuYCvtunlw1fgUpz+K3vSgNm2gNjUJr0Nvqp5wfqnVok4FSheoH3qjZcrZO7dY",
	"kKL2cIv1oC09aEsP2tKDtuTVlurvdT1cYz04lR6cSveiHdUIrUM1qr3So3ibvtjq1I+gdO1avWiJM32U",
	"tgZkAOUnA12XTHEP373Wg2PpQVV6UJUeVKUHValUlZwHMoYpSoZRb+pRCh9cSg9q04PapNWmiui6lCao",
	"Zt2lI8nbZH0sdFXASXuPbKE5KPQWGHHgqzzXERF0A411pTld1Q69QPrHc0ih+w4do2/NL/BoNSh6D1rU",
	"gw71oEM96FB/Yh3KKbH7EEb0oLr8qVWXCtc7NBePmtBUYz4xvtSVZzdI6APeBT1RVbRW13sTEstCp7y2",
	"aPM/VY9LmGub5VbdO5YLDUDdaWRp6pqR+01JrwpVGoGe9+Sm26KVvZnp76HRlnnpHnBC9ErXtsA6/c4k",
	"7Ndy1k2tun/rvPV2BSw0S/AcVIkFX+p7X/OKuT5IsaCZfS4gMMW5y2pOM5wI0mBkGgQfr1AzaK9sjWOY",
	"8UanMFrJMKacJwSzbRmGi2FdRKTbtBLtzcL3mGYP5pAZdm2mvRIgCpfJNwLpOtXmIRBbDwaqjdaRe8L0",
	"Ow16jkCPqWCp9bQld2CyXsoUZ1uk85sFoiwngjDpPv29tRdmh7PvP/UG2zSFV7fL9DY1b23B7Naemu8X",
	"+vPm6zH9O9ZjZ4fhy/UoA3f9aqBQo+L8kGxuKst+IiuDZQYJvIn6H2CGrZajenYtRn2rH43CkUe/Abqv",
	"l2bOwyYW905LRwRkYgfo+MmivLw5u/x7iHzLu9SY2Yv8QNZMP4hSiYDzD+fhzcf3H8+/P3p11MG6TaWK",
	"HRi3KVhgSutDrV6rKWvrQj+Rcnb5dyjJdCdznPHEpNlfVCz88ThulkA9GsM7zl56JTnlsdcOOFLr0w9C",
	"P1Mt9GPQP8D/mxGPnsN/Hp88hZeVk8RnCmxF8eq0OvPZqqdukH60woNYj+Aevru+RaUYVcWatQ/6BkRi",
	"2dhi3oySJDYP64HvCZQm23fCIp5r8OE5/MrJhhIemVLJf6OC6pkWTT+W4vZxTpMk5svOMrtqsdewrH9h",
	"PL4i6lskRVkIAiqurrJyC43/DBw2Gv9A3KxFY42LfzQshgPrQGXwblaoWEPk7dQVyy619qAUCq6vqkUX",
	"Qq1FJl0a2rhTkpWxmkwlayqM1dRxMuXH9smURdBH8LrLHF6+EIWAkuTxIKfCQJ6JGStwclm+S3AFsY0s",
	"hqX8GzHUPjRsyGiwG/ZrdJoQ1OF25j4NOn9o15b2armasG2UVvBYu/RPXwbN2UrRF7vTssv6RXSvhj5P",
	"+BQnTrBddVUMiq7COacMvhcDjCTdYsE9LP2vGjA9eLlQXdoq/EXoJ0x617soUqxfdEhxtKBMPxsBr0XY",
	"Elnm1YN6Ra6OW3nVYVD9ra3nbd04qrboNQXOvqYel1zwXOHro4TzT0X26Df1j83YTc9bh01eU9VidV4+",
	"bLvha08xruMO2B2rXqfUPqvnIU6jnN0zZTYelezytNpXF5v0WR4OvNyzpTSwowt4/weYs+NTMY9bVFUo",
	"GZeIkYgIgXN4KoVNmHOMtqWOr+WCIAtkl9Jczv9RLeJ8Vb3FOYjpaw1CKeWoOul/gZK0W+HDFVEimNhl",
	"rMMH/cxlCxtyS6s74kM3dVYb0n2cG59kKb4dCHRhynBLEf2HOM2/0lviOoaq1U9XKNdDIH2ioy9fvnz5",
	"/wEAAP//e040KEEnAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
