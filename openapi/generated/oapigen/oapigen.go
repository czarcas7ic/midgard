// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
