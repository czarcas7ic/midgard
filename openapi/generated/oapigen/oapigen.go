// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added to the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
