// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// action query metadata
type ActionMeta struct {

	// Int64, The last action event_id that can be used for pagination.
	// This token is needed to be given for next page.
	NextPageToken string `json:"nextPageToken"`

	// Int64, The first action event_id that can be used for previous pagination.
	// This token is needed to be given for previous page.
	PrevPageToken string `json:"prevPageToken"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryItemPool defines model for DepthHistoryItemPool.
type DepthHistoryItemPool struct {

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8) in rune, the total value in the pool (both assets and rune) at the end of the interval.
	// Note: this is twice of the pool's Rune depth. (as pools are symmetrically balance)
	TotalDepth string `json:"totalDepth"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited to the pool by member.
	// This field is same as the `asset_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total Rune that is currently deposited to the pool by member.
	// This field is same as the `rune_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	RuneDeposit string `json:"runeDeposit"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited by the member
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime    string                 `json:"endTime"`
	PoolsDepth []DepthHistoryItemPool `json:"poolsDepth"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters. It may be -1 if
	// Midgard is having trouble counting the results and has to cancel the count query
	// (temporary fix). Also, if new action parameters is used it won't be returned.
	Count *string `json:"count,omitempty"`

	// action query metadata
	Meta ActionMeta `json:"meta"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`

	// if this is given, the actions for the next page will be given
	NextPageToken *int64 `json:"nextPageToken,omitempty"`

	// if this is given, the actions older than the timestamp will be given
	Timestamp *int64 `json:"timestamp,omitempty"`

	// if this is given, the actions older than the height will be given
	Height *int64 `json:"height,omitempty"`

	// if this is given, the actions for the previous page will be given
	PrevPageToken *int64 `json:"prevPageToken,omitempty"`

	// if this is given, the actions newer than the timestamp will be given
	FromTimestamp *int64 `json:"fromTimestamp,omitempty"`

	// if this is given, the actions newer than the height will be given
	FromHeight *int64 `json:"fromHeight,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
