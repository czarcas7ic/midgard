// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// action query metadata
type ActionMeta struct {

	// Int64, The last action event_id that can be used for pagination.
	// This token is needed to be given for next page.
	NextPageToken string `json:"nextPageToken"`

	// Int64, The first action event_id that can be used for previous pagination.
	// This token is needed to be given for previous page.
	PrevPageToken string `json:"prevPageToken"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BorrowerDetails defines model for BorrowerDetails.
type BorrowerDetails struct {

	// List details of all the loans identified with the given address
	Pools []BorrowerPool `json:"pools"`
}

// BorrowerPool defines model for BorrowerPool.
type BorrowerPool struct {

	// The asset that the borrower used as collateral
	CollateralAsset string `json:"collateral_asset"`

	// Int64(e8), The total amount of collateral that user deposited
	CollateralDeposited string `json:"collateral_deposited"`

	// Int64(e8), The total amount of collateral the system paid back to the user
	CollateralWithdrawn string `json:"collateral_withdrawn"`

	// Int64(e8), The total amount of debt issued as debt for user. denominated in TOR.
	DebtIssuedTor string `json:"debt_issued_tor"`

	// Int64(e8), The total amount of debt that the user paid back. denominated in TOR.
	DebtRepaidTor string `json:"debt_repaid_tor"`

	// Int64, Unix timestamp for the last time borrower opened a loan
	LastOpenLoanTimestamp string `json:"last_open_loan_timestamp"`

	// Int64, Unix timestamp for the last time borrower repayment occurred
	LastRepayLoanTimestamp string   `json:"last_repay_loan_timestamp"`
	TargetAssets           []string `json:"target_assets"`
}

// Borrowers defines model for Borrowers.
type Borrowers []string

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryItemPool defines model for DepthHistoryItemPool.
type DepthHistoryItemPool struct {

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8) in rune, the total value in the pool (both assets and rune) at the end of the interval.
	// Note: this is twice of the pool's Rune depth. (as pools are symmetrically balance)
	TotalDepth string `json:"totalDepth"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited to the pool by member.
	// This field is same as the `asset_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total Rune that is currently deposited to the pool by member.
	// This field is same as the `rune_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	RuneDeposit string `json:"runeDeposit"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total collateral of the pool created by the borrowers.
	TotalCollateral string `json:"totalCollateral"`

	// Int64, Total debt of the pool by the borrowers.
	TotalDebtTor string `json:"totalDebtTor"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited by the member
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StreamingSwapMeta defines model for StreamingSwapMeta.
type StreamingSwapMeta struct {

	// Int64, Number of swaps events which already happened.
	Count string `json:"count"`

	// Represents a digital currency amount
	DepositedCoin Coin `json:"depositedCoin"`

	// Represents a digital currency amount
	InCoin Coin `json:"inCoin"`

	// Int64, Number of blocks between swpas. (Blocks/Swap) E.g. 1 means every block.
	Interval string `json:"interval"`

	// Int64, The last blockheight the final swap happend (not outbound). This field will be missing until the final swap happens.
	LastHeight string `json:"lastHeight"`

	// Represents a digital currency amount
	OutCoin Coin `json:"outCoin"`

	// Int64,  Number of swaps which thorchain is planning to execute. Total count at the end might be less.
	Quantity string `json:"quantity"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// indicate whether this action was streaming
	IsStreamingSwap bool `json:"isStreamingSwap"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees       NetworkFees        `json:"networkFees"`
	StreamingSwapMeta *StreamingSwapMeta `json:"streamingSwapMeta,omitempty"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime    string                 `json:"endTime"`
	PoolsDepth []DepthHistoryItemPool `json:"poolsDepth"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// The thorchain height that the outbound transaction occurred.
	Height *string `json:"height,omitempty"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters. It may be -1 if
	// Midgard is having trouble counting the results and has to cancel the count query
	// (temporary fix). Also, if new action parameters is used it won't be returned.
	Count *string `json:"count,omitempty"`

	// action query metadata
	Meta ActionMeta `json:"meta"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// BorrowerDetailsResponse defines model for BorrowerDetailsResponse.
type BorrowerDetailsResponse BorrowerDetails

// BorrowersResponse defines model for BorrowersResponse.
type BorrowersResponse Borrowers

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Comma separated list. Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`

	// if this is given, the actions for the next page will be given
	NextPageToken *int64 `json:"nextPageToken,omitempty"`

	// if this is given, the actions older than the timestamp will be given
	Timestamp *int64 `json:"timestamp,omitempty"`

	// if this is given, the actions older than the height will be given
	Height *int64 `json:"height,omitempty"`

	// if this is given, the actions for the previous page will be given
	PrevPageToken *int64 `json:"prevPageToken,omitempty"`

	// if this is given, the actions newer than the timestamp will be given
	FromTimestamp *int64 `json:"fromTimestamp,omitempty"`

	// if this is given, the actions newer than the height will be given
	FromHeight *int64 `json:"fromHeight,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetBorrowersAddressesParams defines parameters for GetBorrowersAddresses.
type GetBorrowersAddressesParams struct {

	// Return only borrowers getting loan against this asset as collateral.
	Asset *string `json:"asset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 14d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
