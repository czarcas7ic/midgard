// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"HX358uXL/w8AAP//sq9IX8PxAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
