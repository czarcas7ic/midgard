// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"cj0E0is6+vr169f/HwAA//86M+IODvEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
