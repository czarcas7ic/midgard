// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// action query metadata
type ActionMeta struct {

	// Int64, The last action event_id that can be used for pagination.
	// This token is needed to be given for next page.
	NextPageToken string `json:"nextPageToken"`

	// Int64, The first action event_id that can be used for previous pagination.
	// This token is needed to be given for previous page.
	PrevPageToken string `json:"prevPageToken"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BorrowerDetails defines model for BorrowerDetails.
type BorrowerDetails struct {

	// List details of all the loans identified with the given address
	Pools []BorrowerPool `json:"pools"`
}

// BorrowerPool defines model for BorrowerPool.
type BorrowerPool struct {

	// The asset that the borrower used as collateral
	CollateralAsset string `json:"collateral_asset"`

	// Int64(e8), The total amount of collateral that user deposited
	CollateralDeposited string `json:"collateral_deposited"`

	// Int64(e8), The total amount of collateral the system paid back to the user
	CollateralWithdrawn string `json:"collateral_withdrawn"`

	// Int64(e8), The total amount of debt issued as debt for user. denominated in TOR.
	DebtIssuedTor string `json:"debt_issued_tor"`

	// Int64(e8), The total amount of debt that the user paid back. denominated in TOR.
	DebtRepaidTor string `json:"debt_repaid_tor"`

	// Int64, Unix timestamp for the last time borrower opened a loan
	LastOpenLoanTimestamp string `json:"last_open_loan_timestamp"`

	// Int64, Unix timestamp for the last time borrower repayment occurred
	LastRepayLoanTimestamp string   `json:"last_repay_loan_timestamp"`
	TargetAssets           []string `json:"target_assets"`
}

// Borrowers defines model for Borrowers.
type Borrowers []string

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryItemPool defines model for DepthHistoryItemPool.
type DepthHistoryItemPool struct {

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8) in rune, the total value in the pool (both assets and rune) at the end of the interval.
	// Note: this is twice of the pool's Rune depth. (as pools are symmetrically balance)
	TotalDepth string `json:"totalDepth"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// GenesisInf defines model for GenesisInf.
type GenesisInf struct {

	// Genesis Block hash
	Hash string `json:"hash"`

	// Genesis Block height
	Height int `json:"height"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database    bool        `json:"database"`
	GenesisInfo *GenesisInf `json:"genesisInfo,omitempty"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited to the pool by member.
	// This field is same as the `asset_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total Rune that is currently deposited to the pool by member.
	// This field is same as the `rune_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	RuneDeposit string `json:"runeDeposit"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total collateral of the pool created by the borrowers.
	TotalCollateral string `json:"totalCollateral"`

	// Int64, Total debt of the pool by the borrowers.
	TotalDebtTor string `json:"totalDebtTor"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited by the member
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// Streaming Metadata associated with the action if it was streaming swap
type StreamingSwapMeta struct {

	// Int64, Number of swaps events which already happened.
	Count string `json:"count"`

	// Represents a digital currency amount
	DepositedCoin Coin `json:"depositedCoin"`

	// Array of failed swaps reasons in streaming swap.
	FailedSwapReasons *[]string `json:"failedSwapReasons,omitempty"`

	// Array of failed swaps index in streaming swap.
	FailedSwaps *[]string `json:"failedSwaps,omitempty"`

	// Represents a digital currency amount
	InCoin Coin `json:"inCoin"`

	// Int64, Number of blocks between swpas. (Blocks/Swap) E.g. 1 means every block.
	Interval string `json:"interval"`

	// Int64, The last blockheight the final swap happend (not outbound). This field will be missing until the final swap happens.
	LastHeight string `json:"lastHeight"`

	// Represents a digital currency amount
	OutCoin Coin `json:"outCoin"`

	// Int64,  Number of swaps which thorchain is planning to execute. Total count at the end might be less.
	Quantity string `json:"quantity"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// indicate whether this action was streaming
	IsStreamingSwap bool `json:"isStreamingSwap"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Streaming Metadata associated with the action if it was streaming swap
	StreamingSwapMeta *StreamingSwapMeta `json:"streamingSwapMeta,omitempty"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime    string                 `json:"endTime"`
	PoolsDepth []DepthHistoryItemPool `json:"poolsDepth"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// The thorchain height that the outbound transaction occurred.
	Height *string `json:"height,omitempty"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters. It may be -1 if
	// Midgard is having trouble counting the results and has to cancel the count query
	// (temporary fix). Also, if new action parameters is used it won't be returned.
	Count *string `json:"count,omitempty"`

	// action query metadata
	Meta ActionMeta `json:"meta"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// BorrowerDetailsResponse defines model for BorrowerDetailsResponse.
type BorrowerDetailsResponse BorrowerDetails

// BorrowersResponse defines model for BorrowersResponse.
type BorrowersResponse Borrowers

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Comma separated list. Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`

	// if this is given, the actions for the next page will be given
	NextPageToken *int64 `json:"nextPageToken,omitempty"`

	// if this is given, the actions older than the timestamp will be given
	Timestamp *int64 `json:"timestamp,omitempty"`

	// if this is given, the actions older than the height will be given
	Height *int64 `json:"height,omitempty"`

	// if this is given, the actions for the previous page will be given
	PrevPageToken *int64 `json:"prevPageToken,omitempty"`

	// if this is given, the actions newer than the timestamp will be given
	FromTimestamp *int64 `json:"fromTimestamp,omitempty"`

	// if this is given, the actions newer than the height will be given
	FromHeight *int64 `json:"fromHeight,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetBorrowersAddressesParams defines parameters for GetBorrowersAddresses.
type GetBorrowersAddressesParams struct {

	// Return only borrowers getting loan against this asset as collateral.
	Asset *string `json:"asset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 14d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"QHpHR1+/fv36/wMAAP//1YR+wIEwAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
