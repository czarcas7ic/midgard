// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// action query metadata
type ActionMeta struct {

	// Int64, The last action event_id that can be used for pagination.
	// This token is needed to be given for next page.
	NextPageToken string `json:"nextPageToken"`

	// Int64, The first action event_id that can be used for previous pagination.
	// This token is needed to be given for previous page.
	PrevPageToken string `json:"prevPageToken"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BorrowerDetails defines model for BorrowerDetails.
type BorrowerDetails struct {

	// List details of all the loans identified with the given address
	Pools []BorrowerPool `json:"pools"`
}

// BorrowerPool defines model for BorrowerPool.
type BorrowerPool struct {

	// The asset that the borrower used as collateral
	CollateralAsset string `json:"collateral_asset"`

	// Int64(e8), The total amount of collateral that user deposited
	CollateralDeposited string `json:"collateral_deposited"`

	// Int64(e8), The total amount of collateral the system paid back to the user
	CollateralWithdrawn string `json:"collateral_withdrawn"`

	// Int64(e8), The total amount of debt issued as debt for user. denominated in TOR.
	DebtIssuedTor string `json:"debt_issued_tor"`

	// Int64(e8), The total amount of debt that the user paid back. denominated in TOR.
	DebtRepaidTor string `json:"debt_repaid_tor"`

	// Int64, Unix timestamp for the last time borrower opened a loan
	LastOpenLoanTimestamp string `json:"last_open_loan_timestamp"`

	// Int64, Unix timestamp for the last time borrower repayment occurred
	LastRepayLoanTimestamp string   `json:"last_repay_loan_timestamp"`
	TargetAssets           []string `json:"target_assets"`
}

// Borrowers defines model for Borrowers.
type Borrowers []string

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryItemPool defines model for DepthHistoryItemPool.
type DepthHistoryItemPool struct {

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8) in rune, the total value in the pool (both assets and rune) at the end of the interval.
	// Note: this is twice of the pool's Rune depth. (as pools are symmetrically balance)
	TotalDepth string `json:"totalDepth"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// GenesisInf defines model for GenesisInf.
type GenesisInf struct {

	// Genesis Block hash
	Hash string `json:"hash"`

	// Genesis Block height
	Height int `json:"height"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database    bool        `json:"database"`
	GenesisInfo *GenesisInf `json:"genesisInfo,omitempty"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited to the pool by member.
	// This field is same as the `asset_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total Rune that is currently deposited to the pool by member.
	// This field is same as the `rune_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	RuneDeposit string `json:"runeDeposit"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total collateral of the pool created by the borrowers.
	TotalCollateral string `json:"totalCollateral"`

	// Int64, Total debt of the pool by the borrowers.
	TotalDebtTor string `json:"totalDebtTor"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// The type of the transaction given from its Memo
	// Type of labels:
	// "unknown", "add", "withdraw", "swap", "limitOrder", "outbound", "donate",
	// "bond", "unbond", "leave", "yggdrasilFund", "yggdrasilReturn", "reserve",
	// "refund", "migrate", "ragnarok", "switch", "noOp", "consolidate", "thorname",
	// "loanOpen", "loanRepayment"
	Label string `json:"label"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited by the member
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// Streaming Metadata associated with the action if it was streaming swap
type StreamingSwapMeta struct {

	// Int64, Number of swaps events which already happened.
	Count string `json:"count"`

	// Represents a digital currency amount
	DepositedCoin Coin `json:"depositedCoin"`

	// Array of failed swaps reasons in streaming swap.
	FailedSwapReasons *[]string `json:"failedSwapReasons,omitempty"`

	// Array of failed swaps index in streaming swap.
	FailedSwaps *[]string `json:"failedSwaps,omitempty"`

	// Represents a digital currency amount
	InCoin Coin `json:"inCoin"`

	// Int64, Number of blocks between swpas. (Blocks/Swap) E.g. 1 means every block.
	Interval string `json:"interval"`

	// Int64, The last blockheight the final swap happend (not outbound). This field will be missing until the final swap happens.
	LastHeight string `json:"lastHeight"`

	// Represents a digital currency amount
	OutCoin Coin `json:"outCoin"`

	// Int64,  Number of swaps which thorchain is planning to execute. Total count at the end might be less.
	Quantity string `json:"quantity"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// indicate whether this action was streaming
	IsStreamingSwap bool `json:"isStreamingSwap"`

	// The type of the transaction given from its Memo.
	// Type of labels:
	// "unknown", "add", "withdraw", "swap", "limitOrder", "outbound", "donate",
	// "bond", "unbond", "leave", "yggdrasilFund", "yggdrasilReturn", "reserve",
	// "refund", "migrate", "ragnarok", "switch", "noOp", "consolidate", "thorname",
	// "loanOpen", "loanRepayment"
	Label string `json:"label"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Streaming Metadata associated with the action if it was streaming swap
	StreamingSwapMeta *StreamingSwapMeta `json:"streamingSwapMeta,omitempty"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime    string                 `json:"endTime"`
	PoolsDepth []DepthHistoryItemPool `json:"poolsDepth"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// The thorchain height that the outbound transaction occurred.
	Height *string `json:"height,omitempty"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters. It may be -1 if
	// Midgard is having trouble counting the results and has to cancel the count query
	// (temporary fix). Also, if new action parameters is used it won't be returned.
	Count *string `json:"count,omitempty"`

	// action query metadata
	Meta ActionMeta `json:"meta"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// BorrowerDetailsResponse defines model for BorrowerDetailsResponse.
type BorrowerDetailsResponse BorrowerDetails

// BorrowersResponse defines model for BorrowersResponse.
type BorrowersResponse Borrowers

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Comma separated list. Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`

	// if this is given, the actions for the next page will be given
	NextPageToken *int64 `json:"nextPageToken,omitempty"`

	// if this is given, the actions older than the timestamp will be given
	Timestamp *int64 `json:"timestamp,omitempty"`

	// if this is given, the actions older than the height will be given
	Height *int64 `json:"height,omitempty"`

	// if this is given, the actions for the previous page will be given
	PrevPageToken *int64 `json:"prevPageToken,omitempty"`

	// if this is given, the actions newer than the timestamp will be given
	FromTimestamp *int64 `json:"fromTimestamp,omitempty"`

	// if this is given, the actions newer than the height will be given
	FromHeight *int64 `json:"fromHeight,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetBorrowersAddressesParams defines parameters for GetBorrowersAddresses.
type GetBorrowersAddressesParams struct {

	// Return only borrowers getting loan against this asset as collateral.
	Asset *string `json:"asset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 14d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
