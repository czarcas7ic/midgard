// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset balance in the saver pool by member which is redeemable
	AssetBalance string `json:"assetBalance"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/XSFcj0E0js6+vr169f/CgAA//+xe+eS/gkBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
