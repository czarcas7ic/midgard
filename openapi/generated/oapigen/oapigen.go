// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// action query metadata
type ActionMeta struct {

	// Int64, The last action event_id that can be used for pagination.
	// This token is needed to be given for next page.
	NextPageToken string `json:"nextPageToken"`

	// Int64, The first action event_id that can be used for previous pagination.
	// This token is needed to be given for previous page.
	PrevPageToken string `json:"prevPageToken"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BorrowerDetails defines model for BorrowerDetails.
type BorrowerDetails struct {

	// List details of all the loans identified with the given address
	Pools []BorrowerPool `json:"pools"`
}

// BorrowerPool defines model for BorrowerPool.
type BorrowerPool struct {

	// The asset that the borrower used as collateral
	CollateralAsset string `json:"collateral_asset"`

	// Int64(e8), The total amount of collateral that user deposited
	CollateralDeposited string `json:"collateral_deposited"`

	// Int64(e8), The total amount of collateral the system paid back to the user
	CollateralWithdrawn string `json:"collateral_withdrawn"`

	// Int64(e8), The total amount of debt issued as debt for user. denominated in TOR.
	DebtIssuedTor string `json:"debt_issued_tor"`

	// Int64(e8), The total amount of debt that the user paid back. denominated in TOR.
	DebtRepaidTor string `json:"debt_repaid_tor"`

	// Int64, Unix timestamp for the last time borrower opened a loan
	LastOpenLoanTimestamp string `json:"last_open_loan_timestamp"`

	// Int64, Unix timestamp for the last time borrower repayment occurred
	LastRepayLoanTimestamp string   `json:"last_repay_loan_timestamp"`
	TargetAssets           []string `json:"target_assets"`
}

// Borrowers defines model for Borrowers.
type Borrowers []string

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryItemPool defines model for DepthHistoryItemPool.
type DepthHistoryItemPool struct {

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8) in rune, the total value in the pool (both assets and rune) at the end of the interval.
	// Note: this is twice of the pool's Rune depth. (as pools are symmetrically balance)
	TotalDepth string `json:"totalDepth"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited to the pool by member.
	// This field is same as the `asset_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total Rune that is currently deposited to the pool by member.
	// This field is same as the `rune_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	RuneDeposit string `json:"runeDeposit"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total collateral of the pool created by the borrowers.
	TotalCollateral string `json:"totalCollateral"`

	// Int64, Total debt of the pool by the borrowers.
	TotalDebtTor string `json:"totalDebtTor"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited by the member
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// Streaming Metadata associated with the action if it was streaming swap
type StreamingSwapMeta struct {

	// Int64, Number of swaps events which already happened.
	Count string `json:"count"`

	// Represents a digital currency amount
	DepositedCoin Coin `json:"depositedCoin"`

	// Array of failed swaps reasons in streaming swap.
	FailedSwapReasons *[]string `json:"failedSwapReasons,omitempty"`

	// Array of failed swaps index in streaming swap.
	FailedSwaps *[]string `json:"failedSwaps,omitempty"`

	// Represents a digital currency amount
	InCoin Coin `json:"inCoin"`

	// Int64, Number of blocks between swpas. (Blocks/Swap) E.g. 1 means every block.
	Interval string `json:"interval"`

	// Int64, The last blockheight the final swap happend (not outbound). This field will be missing until the final swap happens.
	LastHeight string `json:"lastHeight"`

	// Represents a digital currency amount
	OutCoin Coin `json:"outCoin"`

	// Int64,  Number of swaps which thorchain is planning to execute. Total count at the end might be less.
	Quantity string `json:"quantity"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// indicate whether this action was streaming
	IsStreamingSwap bool `json:"isStreamingSwap"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Streaming Metadata associated with the action if it was streaming swap
	StreamingSwapMeta *StreamingSwapMeta `json:"streamingSwapMeta,omitempty"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime    string                 `json:"endTime"`
	PoolsDepth []DepthHistoryItemPool `json:"poolsDepth"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// The thorchain height that the outbound transaction occurred.
	Height *string `json:"height,omitempty"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters. It may be -1 if
	// Midgard is having trouble counting the results and has to cancel the count query
	// (temporary fix). Also, if new action parameters is used it won't be returned.
	Count *string `json:"count,omitempty"`

	// action query metadata
	Meta ActionMeta `json:"meta"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// BorrowerDetailsResponse defines model for BorrowerDetailsResponse.
type BorrowerDetailsResponse BorrowerDetails

// BorrowersResponse defines model for BorrowersResponse.
type BorrowersResponse Borrowers

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Comma separated list. Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`

	// if this is given, the actions for the next page will be given
	NextPageToken *int64 `json:"nextPageToken,omitempty"`

	// if this is given, the actions older than the timestamp will be given
	Timestamp *int64 `json:"timestamp,omitempty"`

	// if this is given, the actions older than the height will be given
	Height *int64 `json:"height,omitempty"`

	// if this is given, the actions for the previous page will be given
	PrevPageToken *int64 `json:"prevPageToken,omitempty"`

	// if this is given, the actions newer than the timestamp will be given
	FromTimestamp *int64 `json:"fromTimestamp,omitempty"`

	// if this is given, the actions newer than the height will be given
	FromHeight *int64 `json:"fromHeight,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetBorrowersAddressesParams defines parameters for GetBorrowersAddresses.
type GetBorrowersAddressesParams struct {

	// Return only borrowers getting loan against this asset as collateral.
	Asset *string `json:"asset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 14d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XLcNvLgq6DmbivShqFHsi07unL9TrLstevnD52k7N7WTi7BkJgZxCRAE6BGk5Rf",
	"617gXuwKDYAESZDD+ZCzyU/7x0Ye4qPR6G50N7obv40inmacESbF6PS3UU5Expkg8I+zSFLOxJX5Tf0U",
	"cSYJk+pPnGUJjbBq8ugXwZn6TUQLkmL1V5bzjOSS6pGwHkn9SSVJ4Y//npPZ6HT03x5VEDzS/cUjPfPo",
	"SzCSq4yMTkc4z/FK/TvihZ4+JiLKaQbtTkdvmTx5EiBWpFOSIz5DORFFIgVKsYwWlM2RXBA0p7eEoRlN",
	"JMlFiN5KlOIVmhL03RGiswl7T+M5zmNEBVrgW+iV82KaEATT2mHs2JjFaIEFkhxFmEUkga/QFH0uSL6a",
	"sANJ0oznOF+hGb07DNFZIniA6AwxskQaLSjDOU6JgknNXAgSIyrRkrNvpAIuJ7LIGYnDCRuVCBEyp2yu",
	"MJISiYfh871q+eVLMMrJ54LmJB6d/qvcGjPQj+UMfPoLieToi+pQR/YVAKTWj2BfFL7NMGjGcw+qFZzn",
	"OFFI2oqa+tZmxvUBqpeA1DSYMrV9U90YxURimmhwsQEWx3FOhABYeZ7zJckvdLP9w1wffxjsCccMxVhi",
	"A7XISERnNEJTM5oL+f3B7IW2ooNEc8G0ah2MXi4UvewdIj2sD5wzAMfBnQIpwUIiHkVFnpMYRdAZUYam",
	"CY8+oQWh84UEnpY0JULiNFOwX5BMLt5QIXm+2vsK3MF964DvAFOW04ighW0ajF7hXK1M3BdojfF90BHT",
	"xAXrDcGJXOwdGj1snzBaQAskJJaF5msjzRVU/8n4kl1yfg+sXA3tg+5ji4s/qfYoUx3UwWHgTXGWGXn+",
	"jn4uaEzl6r52tjmBD+5/ULmIc7zEiT7mYpJxQWVtq98Tddjel4isjT5QQNqFoSzntzQmuVdcpjBytYL7",
	"gn2YoExt22D0gcglzz/tHRwz7pqjvI1P0w+QCPDxmOwfWTDq5rDxmKCsmCY0Qp/IqoRRceLeQVSDakoc",
	"xuOudsEZAW63wF1LLMW9QAgjd4MJn2sghRYmcY8Y6zmf+QzAsOhS0FyRW5ILcvPm49UHnO5fWWyMP1Cw",
	"YJRQpTvMkO2ImOrdlCyOBnmNb+9PNrqDD1uBUD3WSEMY9d70idro/brOD8w5aRTWAXqN1nvhHs05IEGG",
	"IHOe8ClOgBZeLjBlpfC5XuLs3vBXje3l7iXOtOkZoFueFCkJ0IwQwKdIaOYe3JaI74s8G+MPQ2rJWT4i",
	"VdwGkP/93X3htxraB+8Nlzix0iqTCxEgCT9NOYtFoM0G+OEWJwVByqQgcYX0L4EBw3GstL0Yxh9gjw+c",
	"cjZHSyoXKCcJliRGMsdMVCZ73csSY0m6XSOY8cqyUVwFZhrYPlii5YJGC/jJALHEAuVkToUkOYl9jgdt",
	"MXVOaAyqPUxEmW+SKS9YHSEVlrgzwSgY5nO6qUbyOZ5SIjHw+Vrdz7T7Eox44UHPx0J+ZdDB2GgDAic/",
	"ouyWJ7ckVpawf+bWfjTH1zaMb49ixYtEIDpzd5wKpBaRELVgnquvdvncixycEyQkTZIJywiLKZtrXxhh",
	"RTo6/ddIFFGkzt1gZD47bqwm2E0gb1YZqRxY7qBLnI2CEY7j0mAaBaOlMYxGwSjmTDFcMMrJrGCKcsWS",
	"ymjhmbzhc9MbYlqV+ANC10QTaF4uecwhv7aDLhg57r0umQL+SFSO0hQdjNzJSzwnN/wTYZ0sfWO9KGZQ",
	"ckuY/InGSC6wRBFmaEq0/1LJ7wzPKQNRHKIJu1lQZfB+IrD/jJBYU/u09BXyHCkwVD/S4evMcnI7DMwZ",
	"zQfDmZNbygvhAjwQXrerH+bGztfx3FyQd28d+nvvyKD6/pWmL+hOnZjBKTin+cyxlQvQtrAQdM4qAaTV",
	"QgSyWRRJKcfLfhNmfAIDVt2AzrdM68VtrSzilK0VgC+h0Zeg4wicFcrYLs++A3UWChKpoxsJyiKCjr5/",
	"Nj7sOausD750IAuGM7HgEo6vW5xQxf/kDiuxNjodff/k5OT5k+fjo7H93yYn6Nqjc1NwjrtgaGxUKW6M",
	"+NHI9+6XAuqKLHEei/amTauv3hNEaU09nzMw4js+N0B2p6oNXBvGuwTO4vdE5jTyrEBZHHhOlGS9Japl",
	"B08dkOeHATrTrUEbtIfJLUEMXBuejTejX0vM4ulq4+GF7tc9vmr4BufxS5z1DvyGzhdESERmM6JBhilA",
	"FHeNneI7mhbpQMy8x3eUFelgzJjRh2LmvW4+HDMpiSlmQ4GHxsNhh+aDQa8Pvh5yyjbBu8L6JnjXow8G",
	"vjH8WujBOBoI+01pWQ2BHEYeCnd96DVQNyRNcwmBR0h4CMy3cz4uqnOtZ11eseGjOu9uelnLLxbrd5Mt",
	"0dhhTryjQpamq+PgTjhmAtGYMElnlMTaoK3uiK3TbKCtY8G7ND7VujHiVbT7VgnDeJSORNkjOU5+wkIQ",
	"zxGtdEz4pHVK98pTa5ZYGTl2FB/dOnMYTYqsod0FMT6GSo2rBtFwFILkqBquf1pry7DdpiVIrIQkKcow",
	"VRpJ9MkqkQoaHwwxmcqfqBAFiX+SPN94etUf6f4Kz/BPdWap+UIUE8ZTpchro/bm41XYCUROFNDbA1Fu",
	"PiC+RMBgIJQ19RPPCPtJsclP1c1zlwb/A6N3jiprwy3AKlM/V1SoRlX4AQbsnFshYLX/yWHYlLDqwt0r",
	"unE+J1KzWD04qHFdoEQJtNU8Jxp4twyntwQa1tTfVzdvwlc3b0bBOl9GQ3y0xEAT5DYpt+mqg9M7OLGH",
	"JPp2rE/E9WHWtnGkcIU2OWXTo9kvx8nnX57Ht/nTrEhn0SJ6xmQy+xwf3578Gt99Xv5ClrOn61FrokDe",
	"SpK25e19mW0Q5OGS4Fez0Hpm3s4Y8+2wCYAZGlVXbYBvd7jPzXpFspwINQrCKKZzqmQgrIlFKyMMW84k",
	"83OfQNVH5xk09ArGjmP3DPpRhl6+OXv7Ibz+5/vzj++UIEqxXItQy8MGPi9GrbdhGEIVzjy4rIX1tIid",
	"MknyW5yITaKD3padBob8uZ29gX8wSOBA48OHH4Sh+Kn17qC7Vpu2Ka62DZr1khQ4mMvTuSQU9TPc25gD",
	"g2jVX/1pl95Jf5c5jTxy6XXCsQxMSJbSdO1cecFIiN6GJIQ/LTiPTIuSXXpm++H6onNCWEpr0h+uL9DB",
	"FKsjkOvlxoRkyqpXX9TSD70cRlh8Q1PS60UlJhpOTTgtok96xqKmBnhVi2HuyNKxaa58t9+upLilnXi7",
	"cf2W4O80t3SUxeQuRNefc3lQURn6K+we/H34qOEo7YrBhSCel73ByR/K4ORqTNNxh5WXoG7AHFeKOLef",
	"Ukicy7W0MyVzynTw5RYUJFZMLq6LLEtWnbNcqzZIQKNdlqOG6SdUPdOuRFr0zqFdE3qOgwom9C2qc9Ph",
	"QAgG+OWrjazEQeDKW5e8ajKxKbJaLN/giRqW67tr8WKYeO0pJEnqN9oz82vj/gvkZD0sHVp2uZLWMZMV",
	"9Jqp3Et/d18OplwurLWCWQxdDnu2K5ywD1ySUyQXFPIA5NJIejvmN0IzLgQghOgACxNGCtejqzQFXzZO",
	"kpW9FjgcQAMWF9XS1+2AvWesY5+w+Oy+D2r4pISJIVa/MCYsfnd5HwdPc/qOyXX0532fBQOBubrf42Hw",
	"jlzfh5AdiIP7U3OKW/qWRTnBgmypfSBq+qMpkUtCGCqFMoiNXryCMni9oDP5jgvRCwFNM5KnWOnnKOFC",
	"lNPJ6rKcxdqVAwIGKQ2/8/TfL6vDkF2bO2ElRvxYgM974PheKNAQIHbj/PuBaZ8CYHdodhcDu8Nwr5rr",
	"IA2rwbcNQdJmsdZWNojeQ35tfAeNI7pxPNTOzdY51pThPh2hmTG0veOjMdLGvo9mf3A9bOP+6ARkqAfE",
	"C0nbCeJr5glJmH/gMekQLzMl6xUF22CBip3dG1QUF7lNiAPq7jNYpo0gj3XXquAGzXV7RFIqJYk3m5BD",
	"+J5FR++c1wul9/IZKtPQhDrcJN9ioWTQhPqWi7KIpwTNCSM57lsgJBgrRV5JrSJFfDZhlcyfEaINgxrW",
	"OvWnjXSYUixu5qzZEe3aGNkE7eXMrwkZQmB17AUo4uyW5CZs9uqHD68CuJkkUd+2dKhS/ktti5IqKp3g",
	"aKEPJGtTNpe5rWDw32hrE3wz3yCc370uwX5DdJ9H5ya0OOjwrBNNQ0g5rNyWJj5SD+pitYHtoCeCoGsH",
	"W+gBfJMaIfUwicf3/W4wmzTES8UMjiL1jUDlZeZWclC7PMoFUQashw7g9xqs6Fsr1w67eG43h00+4GwC",
	"4MxhaEXVAdzC0ltyiNQ8+BNhaJbzFB0wMsf6Q6V4ignDThisdq6o/aPyG4GEFYiidj6AnADa9POTorP9",
	"bKxaoJdj8S3JDZUO2FCdIqYx6kwwXZWYCJBY8CVTcxpCOru+fnXjX1+bGpRUGgBHY6naMW+pqWBE/XlY",
	"AegApRAx3OPlYS3frnSupIHgihgdNvLJDZPK7rsDx1OvI+EmLwhKCS6z3Fdw9DG9QZKjsms53ZTzhGCm",
	"s2euVywaMmqIXuNE2B+dYiiQe4EiW0qlyGyAT7TAlHlnTbCQZ/N5rthJxzX1p/fT+ULeXNueL3mqtcdN",
	"O74mMlps3u1mwXN1CGzST0SYMZK/6c+CAizBfbk0ml7kvwRsEKmzpfWJyg1tQF5ffxONrQ3xU6ZZXYs2",
	"u8Igzp3SGdWS1Gk21zmlPTFFuq8T3lEP7SAZjxaHnkG7oiT6g2GcMg3qWI1jqsDAyWVtne0D0UZt/DY6",
	"v3kZnt+8VCfULaYJnibE0daqmVrlFba3g5tDbWwItwbY2hLuBmWoKeyHpa3uetu1jeFY+zLK1n+HpNcB",
	"54u5kykjsbrttwm7IIzbU1bp1IWwLbWujaUdB7p2qM5uCtnLgfWryoIbPdCtm2swSvjMxCuw2MQV2Ok9",
	"ODhYg4TDbsiu3NN1MHT20mv9dn1t/7/jVH/HhbjMuSSQcXaJaX8sb+Y4MW3wn1qnRoqJI1tigTK8UkoY",
	"iXAhtD3VcORPWFZO24ECRvqDsRiRjtYVLTCbK8Vr6dSA+a6kiMMNDes/tvW6CTVYfIFc2lQclRGgO4oj",
	"O06fPLJthsqicswNWa9N2EO5fRA2+qbcQfQ5ZD9Q+tVwfhhuH3jRcaZ1yk6vuPedN37i9O7QOqnWwnGT",
	"nrS8aTC+T6WoV3jaOc2kVfxpj0knGtQdU06cQfwxjmdxvCYFxBEZaglVui5Ixam9SewMMTwzy+5wuhis",
	"6Hh6Y/ivGfFCHwuDoYbAfSqsTZSsnJPduxabij2jJNHGKE4Jwtqt/jMMaqPqf4J79Z9tU3V28JzxmITo",
	"PaYsWdVSvycMfEw5jj5RNg9Qqpv8LedLuUCXJI8Ik3jecZOow59MtYH1kc7geJoWEjFud25FZAB1PpVt",
	"PSXm1+XC3MmDVMowzRHOc3pLRA8c/xiUyONuQyVgwe01jIRiLMlrmoteQu3MEtFBBiDEzX13tfOUOXvf",
	"NfU7vOXMVX7K5hMPjGQF5DVz6oHWpyTh9gDrZSe/N1SJC5QTUWqL4D/OyUzJN8m7NK6hogTOtA0liRnf",
	"L0jsgBvIERNiOFCMwAR7liIKgt9DiMAROUCGwJo3FyGa1dfLEAXGJiKkoaINliB+P6xLTo1jyhNV6hJL",
	"4whyKT9wT9Q6ohuyu7n8lkhtyb2mNOo+6/syr96bAhv3n3fVXTWkVttmXQlpXx2SL2Xxm7V191Qrtx+U",
	"1xlQ88ztUxbfWdPPbl7V1+eos2UxvdXKdVK2LxfRli50MjwEgsDgKWexFnhw+eOEXWibYHhFJd21J9qj",
	"FUy2Lku+GcrRm2LttjVRGU6hjP7s7KppFc9xdvnPTtP/VTgP0TgcH6EX6OgvIXolJE2xLCOfYZJCI1aP",
	"Vl091pwE5iyYsJwIkt8SJOivJEAkTakQlDPV4JYE2gsvUEZytCI419WVleTSF3kzHEmeoxcTdvAPQj4l",
	"kCj/Fu70YHU6Zw19i44O/8/TY/QdOvIL1VJy7Wnxvuq2dURMWB0TaM+IKNnfYENf+CoFhYB1+tfjw/Vo",
	"YeROQh7im0HV4w70nYn2RZSZnlAmCjIswy5NCgorQC0n4KCYL1nvHU1OUlsq3Lh+tKOpHAYd2FLh3ZfZ",
	"EBvzGvDWseXoX+MwPPrRzKkGNr4+W/hfciSyhEpnb02grmf/MYsnDFg+nLB3l3pf0IsyBOuvqAEV+h8T",
	"VtEzOn2BnLYHR+i7ZofDTnearSGxk4h0C3BsKiNN302EZK3eR4AETy2npSgFepsSQIyRpsbN6JBbz113",
	"xQhDVSjKwHsBHoMQnRsfrzHFWawbmVhxE0YGWquWQJRNGLkl+comnCgleEYZXGwdutkppkMGAMJQTcbt",
	"W9eVliK9i3ppJI6SNJZJTb9wrR7oHi+tcB73LG7QXfuY9BBFe3May2qLpG4B0uby2hHXEPo/dusc/niP",
	"d6bIMDN1t3WIoBA8orY2JGampl2IPjLitgRzaIHzualqp/hrwnz1FCeD60p25Tfbq/JGBlB8/PTp0fft",
	"dZkPTrnuurq74HlWTI9wHC9ZRrLP87tlPHtc5GSczZ/O1G/F3eNV+j0bnxyfPEs+5UQ8ffLr8pfFk+j5",
	"+Mlz8uvil6fj4yefV17zUjF7p7mqPoKFB5EMfm18wfOj8fFqnD4uMjkf394WMVktxuP8eMZ+fTZefn4W",
	"P189S4vjuVdUkig7fnry6ag9efnpd8FMszKhgyYX6qDcVy89g7459AoY6MZDT0599bYyzliBk8qSvvKW",
	"ijD61FkiOIpwouTc2eVViM6gt6mXh4hRr2KUUEZwnqzQgbKmKzXrEKzZCcNKLaJcXy+tMpNWVzqTHo8R",
	"z9HReIxivBLoIOJsRudFjqcJKSOm9ADl4z7BhMVkhosEPBePx4ehVf+OTMTN0fgvoIklKwNwOGEXhZLi",
	"6K1z6/eOCx05DPH4QicM2uML2QC2AHwF2tvt9J4w6F459UFYHI3H36ql2By0QKGBScJiO7JY8CV6f/a/",
	"D84urwI07rzktWUbOr3Fu2UMhV83Vz/8d0nW3z2h3jssA1K5IBFNcdJ7Napbolg3dS4HnTBJQWSIDt7q",
	"30q9ZTL67mgyAj+VJvPUBJbFnAj2jYQXUaph6hN1qtp9VhWQqUdsKLrt9oDtmiQVdsZgirPLq26RpSXU",
	"1QYSiuemIv6/m7AyW2+AM2MusACX5Yoo+UQYypVqQuIAvTWeS5Atv5KcI8qEJLjrpTM9bt8+2UQByC+3",
	"RdgpM7Gtt2o9PdvUz1uao6yr1y4SxkR8yUguFjQLO6wlb33sG53OJmtZ3gEiCtFnNsYsQNeKfuNw31US",
	"wv3WQgg7DYiXVRm8/l1zqsq5giXKCXYikcuXxcKeFP6pvOks6Wang2ph7kSDJriHIg7eefQjDsdP1osk",
	"U4JARw4pK3eJs3JrQAIcP1lo4yHWznoTUVWLbFDsq46oKCliIgwHpVTJuhxNu2zfjgpLFfDblpPwqn2V",
	"6HeKpreuCAZUmqife3X+r8sZV4S36blBbz4N2X0JZ6ie7L435NeW3bd+9hIbae/DzIsVVdmbn0w82Gl3",
	"dMoOAY+Dpm0Fs+wa9bjZrL3r3DSkcdDU/lif9vQPptGDadQbvfDnr2JmSyInNOuY8eQJOjjHggqUccqk",
	"CND4Oyj6GKDlguQEwT9eHI3Hf/HwJxymp84s/s39g0QC725G/nHssXvTxL0DL3G22UmnCcsoFB0Mpdps",
	"caY4Q3cfHruYDvu1HPxqPMi3s/vh7glroqo5W9d9CLTbbqOdrt1Dr00E7R3dJix2DL4DKdXDhj0TKO77",
	"arvVmKxrs1Sz7faq6tk58NY7VXbuHHqHfaoFcvuN460Bt339RvHnggwpf2QHTwg7sBMYzeo/lDB4cfnx",
	"47vD7jmulzjLOie5IFlOIgxpwZCcjZOl0kLHX8uU30deyHoTwR/Mv2Wex/DpOjliw0SP4TP2k/MGyR7D",
	"p+yarsPTUboh+r0ZXT6QbZwXLWlc53pHaWicWHWZ6CotXu7ynsI+WV/XwutnWU1cuhJogIvnz5IP05aO",
	"PkdRI0Sy7dWZzWhCsey+zD6zLfTLryYI22i0arMDRNJMrhCdQQvzwmHbprLjvCZdXOU/xt1T/MXR+C+H",
	"HbWSua8aQRmfoCxtbsHW4aXV64y+5EY3omLAO+jQFNgZC+6tea9+L7MHytcd173sVw1ejm1W20Bp0N5L",
	"P0E03qruDiauPUtdCyFIV+antfFUtUeld83GMrcje0vAAuB2zL+qxthf+pU5+vX90q5JWHqU3zkJa9iM",
	"VyQmOi1/0IQmZSKHXiSuUgY2Qtxe0pyGzvgVkp0qUH6XlKf+6f3pSDcLgvwpSTgnOi0JYmg5OuAM3MJc",
	"EFMZThEB+EqLzLi1FviWIIwinufwnHdcPVUPHr/Oq9p+P4MeYZdsrJ6KQU6MVAVJI93EZZFWkso+0kvq",
	"j+lvX2CkNs7G1UVqvbd/Y6QDiKGXZfXuHUVF2o18BczvrVCEPg4HhykD/e7+NMT6eInqdTNT85m5p7eO",
	"bdhmzjV+QD18zRHoRGhs+KbBv01VX9+1cWlqOWhZywOdBfavNycj0SguPXBrB1ZWv75nCqtqgK+rL39v",
	"rEtYvCU17wfLuozz/Wz8Hup5b0MAG4MyrAT8fb9Io+bYDynsgPdhkqi5NTXoPTTVYmaH7oOm5PHKL4hH",
	"WZtkunH1K10Lrty4cJ8lrzon8dNYjGmy0u/1/iBMbu8u3uftr4xbbzlU9776CVJeyI5FpJzJxV6XMeyq",
	"1qYk1rOfrF4jwq9VOSrc7vK2okwdXHeg4+TAXIFIk8NBlFpOtC6sb8B8jfi+/vkej+Nd1ubO9Xgchzvc",
	"VfuDFT1zNsITBzKpWFIogLk2Da+KGzAB5xDqYrtrdwHJo2OIZpqS7FiHxXTefJ8XOduMhmAKfSUuuX+N",
	"nbO9p0xuMZuuncHtvf6A2QbdePfOpeOUhs21/sLWO5WeYhMk7v8ucduaasOOuG3KmnXPMECvcO+oajzV",
	"KpBeu26qCbiG/KnfN/VfTNVpvMVinsPYe7R1XGt5L4latzjrrn36bpX6FKWc4JSyua1t0d7Msgmyl0Fu",
	"EmjpRzeXJXQGFWCwQKLsZy52mm/aD7QegLHILTz6q/10OMkJjldoodDIOnIRSg+jfUl4SGbpDNOExAoX",
	"+talL5tctzXw6QsW0LLr6w7dK4W281L3Q8vFClqjOZdm4CF3JBW4gwG1r3wNB9PsyGs9iprMyI0hEFK2",
	"CfpLT856sjDVIspXypYZFiE6gFohulLLoQ7atSG7OjcdunU+fb+mCMSNVTpgFFMSQrvXGU70BmqajHW0",
	"sk13PgyRU+7JlkeC+hdsjgomaeIfR3ToFbyQm+D1c4GZNEV1vCtr8Zt9OdxmIlOBsgQba5UjckeiQpKw",
	"zJRRyovjWChjnBMixBABb6uQl5A6xFDbm5KkKiQ0ed0r55Y424N/uhplc++003frstdeAAZ7ppsQePzS",
	"jSaeR5/2G1MHYcawsyRGZnCoHQEEcThhfIbaYR9KrWhEfQSoPKXbv+q7D+f3cMLO6dzQOlz7lOUsNDRI",
	"HWApTjQ3it+hmPN/nULFvo3bG3FZmhIJ1deRsJ8TBpp6bowCgIBIGpms4Q2powN1wyyjyBp+HcDoKXon",
	"WBtCCWdL/aEWWL9jtHTNfmAyMA7XLHKAKdC0snvndezt3JRJ8c7dYu2vQzlNcCXXBvn+KEcvbCDtdICz",
	"hnb0FPugnq75h1CPhmJb+umaeQD93FNQ/2Cps0dZM8gvUlFLm/06n+AamgiwgYhpCJbdMgR6hcpgUXI/",
	"CQNrKeEeZMcQr5WPEGqg7JBmMIAOOkTETgkIXjLYQiKU6U+dxfkcTkPfIgfd6FtUP/LtD64k3zoLwuHD",
	"clrzj5oeUJ+0O7GjSsbqmXXCaoxYTlz+s3H81yc3vx00EH+49T3iFk66Bu5r6W1r4tYbmo3vtKojsjfS",
	"vK6stQ/geiz64Eh3r+7cqRo1I+PXvolQq3j7pw0Bp6LmBm1PQFlMI7WK5YLIBcl1IrfxeNZ8nW6ws8wL",
	"4n2Lznm7b/BTkbaWnppsibP6s4S7x7XDmPcR1S58DuZeL0Wrg7nN8x/LPXvfkcWnVgqncVamenRdIN4o",
	"nPfHMaeU0bRIES9kVsjyYc+MRDrO3EbA+im7N2i/RicODmqwrY/lL4P+m2TuY3gbud8ZeE+YzCkZGHoP",
	"vkNdAUEuCC2DyYkAvGATfG8nHRp9b9u/YjJf+dxY5C6jeY/L4s3Hq5fg1pw6Dwaq80m7Pcv0BT2O9wSF",
	"EkvtGeDnbwQMsf/yjQ1y0TCUyw3KzenbWY00X1hMx1MsVmgbbDXe2Kwwoj+0+vd1ajqBTSvck4Vy8/d3",
	"u/txq0E2duM6Xbf24vqmH+rEbc7fJv5Gi68aWAzRM2X4zaAFQes//bPjmyBR65Q4KaDO8LocoGZZZTUZ",
	"vFt6MOWyrPqvRLApRnxYX/WErY9oriB6BzXshoTUQL3FquRd+Tyv6xOCSzHyucCJQD87hZFhKrA2JE40",
	"EuCnnwOl/1AoAzSljIj6U1sTpjM71GI1DmyBdlOTvH9teu6etVkLxsW6qWKtl2tQrp/QU1DAOm1hbaeW",
	"h0BYasT7Se8Dl+RUa5lUILlUFA3eBPtibvkKpVzYw1ZHru1gXDXw4H97XjO3V6pVqmW/3gnGRDD0/Lkm",
	"LK49TNI+eDhlg2pHg5Dvejv4ZuFWXi4vdw2v+ApXIx5BHGFXfUh59/aiHxMUylEuQnTNU+IOLdCBKCJF",
	"St6ZBUpxbEMWJ8yEjAHdHaIUr2wmExSxBNIcQhcAb3X6WsT69rr1ooknhXGVpsSoGs1IJl209eC7o3CM",
	"JsV4/Dh6Af8h6CgcHwbI2lsCLfhSrWuVQkF2nNTqEuFEGV8hGusr/gkDGk5WqGrv35mpshYuwVjYg0VR",
	"2RHAyaVYqMpwTliZ+bdhvabOY6Z6MlqLAl2OiReyrySTE5m7Qzmm6qBp5rTlJOW3bj6lifnH6pOAyqSz",
	"xg52xAVvZLyWD17u34BtsEirPkJF5nWqChq2XPcGm8W2uewLBMTMuA6WYhJHILVICkUWRzG5Ff+zFFgh",
	"z03UU1Om2XfzL3VN97PLt+hzQZSZ4NhB8NwoW1mDLaFMHdu3FAN+z+ks/3//V+hXILKcZDgnAinY8lQ/",
	"RoKnivL04xT6CQDJdYYtjmmyQuUT5WD3mfLyhSC5CEFhUlBlOFeGoStgIepL53MCSdUBViqjVgFSOGJB",
	"q/pO6LXZB+sVICn+pJ9r/S4mmTpOmCxxQLBYhSWSYk50deAFT2IU5VSC0HGWGqIbrk9qHOmEXgcqxV48",
	"4kmg14bEghdJDHOttFXJY4JimpNIJisIQ6ISzML2Lo2C0S3Jhd7I4/DoeTgGuzMjDGd0dDp6HI7DsTpH",
	"sVwAUT+6PX5kzgf1T6/nAqx0e4hgSD61EXw0RzlJ9MsOzlETojNWBvcJNCeM5Lb+LWcE8RylPCcTRpnn",
	"nCrDAynUKCS2dAJyqgXKBltrkrA/4BU8oQTFGJk7o/9kDNEVNBaQAZzhOWUWWtDK+Aw9HYcT9pomErKS",
	"8AqeqsuyhOo3LfRu2eFAPqmDDXb/bTw6Hf2NyDODZoV9UzRSjE7/1cT2S56mGAnFMKaWpZAhOqvcoEIr",
	"N1yhPqIZJVquKlak7BHwlIMcsz0TmzGNndp62z7Xpkz2ESwZ6tCmpDL5R8FIy0RPlcgvQetwuGhCflfR",
	"kwtvDdjj1yfHT04eP7t4dfTs+5OTp+dnjx8fH58/P3lycf7968fj8fjo9cXjZ+dPXo0vjo/Pxucnr16+",
	"Ojl7ej5+9vzi7PxJxwrkHcTEbgB+x1axVaNGgVsf0WzLwcs3Z28/hNf/fH/+8d3hhJ2VR3OyMgFIAWLc",
	"/KEkF+NwIzUzNOi+4GivCOGEf9Q42URtr4HL9RhntpinKNIUK6Vr9L8cMtbQK4ZghIIDW9dTZorwoKam",
	"LZSsdEV4h0RDqwHV1UnmRYJ9E13pLygtEkmzxL4YBDsSooMFvlWGMJYoIVhIZAAARtZvHR06E5/fvAzP",
	"b14GSliGVz98eDXSx6CHSG3Fo+F7/NERHlFjv3VkNlJjCPuAHWcTdlBuRhldHZQKR4BizqBypK7KEpiM",
	"jcMGS8IYtdcNO8hWrWAfZFteuzSuXCzF6kVpoA9bNGV30ktQdmhTwUDtIxWVy1SRN4cdpsIx2uz+ShFs",
	"4gGtCE/BUg6yyQhd5GPXsRm+We2FQ3XC6fq/JA6QUzP46bhjhxOa0jrVas0CLpnkiZJnKb6jaZGOTp+O",
	"g5G5Xhidjkv9UJ2kc5L7oDPHHdims5kgsgZUF0y66RqgNoKDzkrfBXj4A4f4RHklAu+YZcpsshHR0LgD",
	"StX6Es/JDf8Ebb4SsDyJ4b4Ps/LRf13aZAjMrpvv94HX+DGGALuwAdZfmQyynNxSXojhpKB6/A6kwMhy",
	"e1JQ9svN1yeHBswbkIMC+M2uJPGjkt8i40zok+V4PO4yv8t2j4xyfWV+ABFeHUPmK1KWDHxSZs8UJ5hF",
	"5NFv5sT50mkA6YdthL6e5MpsNO9BmhOyVg6sTJAvr3OrTef5hGl0BkqpMC2VviukMgQj1V/fL9JZqXdR",
	"YZ/LjEN08JElxoiaTZg7tN0ooxmW8wdgnE65XISHE2Yd6CwGNxWCv5WVHSOodkT1kuwDR+D3LTKkS+Ar",
	"DPClQFR22DjnGqfrbBz3hfVwh6tOqg8wSPFr2SGVD0YHVWxwYjcqUmGBBIngckDnIR59/2yMDuis3Jfy",
	"sde0EPp18ykpPx66Kzw6GZ88ez5+Ph7vJP7X8/i5e01dh7Va2Vpwj8fwv+2l/37Y29BVB3vbpzsNR+s4",
	"gao+X8nw5lGcTTieIWxT4oTEkgpJIxOIYMoE8owwlHDMRCvF0cQqTJiduaT5Du4xzcyjKGuYyLoEwFkl",
	"o0X56E8AYNsKf9DGCvpwwrRKroQETgQ43CojrIy0ME4oJUZIVvlutAF08E3wTdNambLp0S93s8Xx/PnT",
	"z49vxzL+/PRkxsjt3clddCcjtpAijYqTJ2kwjY4+R3dCrMiTX06ePR4vnpHFnMzx4/lq9elTsZzH8zTN",
	"ipNjtj8O347oatvRdbbYVsiGvzTJTQynMnDZmiecF6QZ+aLO3/JdJ3AZmK/KSAfhLRZ8yRBnEVlDYaLs",
	"vFZU67dVYPhydjQnUiooFd0jPMeUCWkC3DTdCeclrHC0rTW+07at27CGOgCPI6/fq1r0D2Zxo3AhPAld",
	"Puvdwv9LPck2y9JduyQgfKwvKOZR52qul3g+J/mjjxlhZ5dv0eNwbBWGSNuClc825lGRKmC8K7rgUdd6",
	"GpVBO6aszyQaC7swk2N7SYPnikpH1y6wox/tmhcEJzqOZB3D6RuTJsfp/siuxip4Z5dvwwl7TzA05DOz",
	"/+JU6VMJFvJmwXPw03+H3mltTtMJXGJlPDfy0zYLbb/XRNfqaHSbEaeER6vTS56mVMp2twg+VL7Ti3N4",
	"JUid77MiSVZWxSQxWkEWiR7vzAYItOFo9IIrn7J1h4x5o/dgGxrXXTtoXH9Eb9mMlzRua6FDUIN49FvG",
	"ebL+VAfZWj5RnpdREcJcVlGQnzf2BVC7h7bulSSNGCBgeicSY8JMbFKlZi+wQHLJUcpjosjmr+gfFBZj",
	"CmeVMhhRadxDAmFkLqYUGdKUmIggEaLXkKrAYnTDUQyONWWeTRiCCzT92JWlgnIOuPjAasDQAsAL6YMB",
	"Kz13nhCYJwxvOBIE5/qJ/4zkSsmzOg65w5GshKCA5avh7bCnKONC0GlisXmKnqaUBWjBizxAMV4FaEnI",
	"pwBB9YsAfS5wLpUWsyI4B0gh9+QU/esoDJ+Mxz+G6ILMIJKn8qyVwXMhuuDsG2m1WWXPlAuEh7Qgfx6G",
	"Vdz1SPJTxDNzK06ZDHSwldb3YTGXFvxC4Dkx11PObv9V5/cf6dfCTtHP/2E/vojxalKMx8cnsIIXR+Of",
	"m83RlMx4TpACo6+j/pfkL45Oxs+fHz89GeuxwB9mx8IztXlqWUMGU+1eVOYIDHehQdL1EWaWyCQ3FGcc",
	"g6BzlgXg4P43UD+5nxlfhooePzLzspouJ/xkPK72yhTc1b7QU9X65zbQDTD9iJiwy8qNCSEYZs9gs+DR",
	"twoDNraYoUJYwW+hQCmRODQRTkp8Q7AMLL5iDxshpnCvryxqdFI+F1ddZyo+s0sD7tdsY7hKKQ7Kogce",
	"n6lZ1P7VFv79910UUO9oCkMwvvQM8bOlehNVp7fQ6cHsTWalEvplvBuAOVCDVILTOvCosALGFjTz6Pmm",
	"YvEOZnzJ+IpKcRIVCbZXsJXlEuOumxWnmEQ1KWFFqhQQJcNGwUgJMajlo/opMWar+Oi6FEqQjYKRkmRO",
	"tEY3xB/aAg1y0fR7gei6NMssj5Yy0V3T4w573RbMaKGwx43wyonqVURvbrpFIyY1RG9n2kjQLFZ5FttC",
	"oeEOMcTc4Q7hu/pBroHIByxhEy+NYqKv4fdw+axDLYImINIg7BJZrmyqSATnSntdb+HYhiaGxuailO7M",
	"B0XnQdF5UHQeFJ3/EorOKyMMB+o6DxrHg8bxx9Y4GgTfoXTYVp3aRutxurVqRxXerd0wZWlrJTT0DSug",
	"1DmQ3s50zDzV8beVimL1Cus2hyyUB3XlQV15UFce1JU/s7pSBotu65vRgha8MshKZlGktXxBxbuGX7uC",
	"rbTr5sFV41Oc/ih604PatIHa1GS8Dr2pbIZearWoU4HSb64MvdEyL7Q4t1iQXPdwi/WgLT1oSw/a0oO2",
	"5NWW6k9QPlxjPTiVHpxK96Id1RitQzWqPTynZJu+2OrUj+wDFv160RJneittuc8AKo0Gupqbkh6+e60H",
	"x9KDqvSgKj2oSg+qUqkqOW+hDFOUjKDe1KMUPriUHtSmB7VJq00V03UpTVC4vEtHkrfJ+ljoqvSU9h7Z",
	"YnxQDC8wx4GvOl9HRJB+3UlX49OV/9AL8+TTOaTQfYuO0V/NL5dqXlD0HrSoBx3qQYd60KH+xDqUU4b4",
	"IYzoQXX5U6suFa13aC4eNaGpxnxifKmr826Q0AeyC3qiqrCvrlQnJJaFTnlt8eZ/qh6XMNc2y626dywX",
	"GoC608jS1NUu95uSXpXYNAd63pObbstt9mamv4dGW+ale8AJ0Std2wLr9DuTsF/LWTdV9v5L5623hMIZ",
	"miUYnlMVC77U977oFqo16Y0UC5rZJxUCU8C8rOY0w4kgDUGmQfDJCjWD9srWJIYZb3QKo7UfK9lOYLgU",
	"1sVEuk0r0d4sfI9p9mAOmWHXZtqrA0TRMvlGIF3L2zzCYuvBQJ3UOnFPmH7LQs8R6DEVLLWetuQOTNbL",
	"meJsi3R+s0CU5UQQVpbWrN1lbeqF2WHv+3e9ITZNydjtMr1NtV5bVLyFU/P9Qn/efD2mf8d67OwwfLke",
	"ZeCuXw3U6lOSH5LNTU3cT2RlqMwQgTdR/wPMsNVyVM+uxahv9a1RNPLoNyD39aeZ8/iLpb3T0hEBmdgB",
	"On6yKC9vzi7/GSLf8i41ZfYSP7A104/GVEfA+Yfz8Obj+4/n3x29OuoQ3aZSxQ6C2xQsMM8PQJVhqylr",
	"60I/I3N2+U8oyXQnc5zxxKTZX1Qi/PE4bhZvPRqP4y5+JTnlsdcOOFLrO36i/v+ZanH0RP3/Yxjqe/h/",
	"M+7Rc/jP45On6j84SXwGwVZ8r/asM6utehQI6ec9POT1CG7ju6tcVOpRVWxae6Jv4GAsG1v6g8fWzUuK",
	"4IEC1cn2nbCI5xr8WMmRytWGEh6ZUs9/p4LqmRZNb5aS+XFOkyTmy84ywWqx17Csf2NqviLqWyRFWQ4C",
	"KsaushKFxosGbhtNhXDorCVmTZF/TFqGbesgaPB0VgRZI+ftVBcrOrUmoZQLrq+tRRdZrSUpXeDauFaS",
	"lbGgTD1uKowF1bE/5cf2/pSl3EfwGs4cXgoRhYDC6vEgB8NA+YkZK3ByWb6ucAVxjiyGpawVrkdP/lzC",
	"tY8YG6c2WBL7NUNNUOpwy3OfJp4/2GtLC7ZcTdg2Uyt4rKX6py+M5qBS9EXztCy1/uO6V2efJ3yKEyf8",
	"rro8BtVX0ZxT0t9LAeZU3WLBPYL9bxowPXi5UF3sKvxF6OdYete7KFKsX6dIcbSgTD+BAS9f2KJZ5gWH",
	"eo2ujnt61WFQRa6t523dQaq26DUF+b6mQpdc8FzR66OE809F9ug39Y/NxE3PC5FNWVNVZ3Xei2w75msP",
	"WK6TDtgdq1651D5G6GFOo6jdM2c2nuLs8r3awutN/iw3B14h2vI0sKMLeMsIhLPjZTEPdVR1KRmXiJGI",
	"CIFzePaFTZizjbaljrjlQj+4pYDsUqDL+T+qRZyvqjdNBwl9rUcoBR1VO/1vUKR2K3q4IuoIJnYZ6+hB",
	"Pw7aoobc8uqO9NDNnRVCurdz450sj28HAl2qMtzyiP5D7Obf6C1xXUXV6qcrlOshkN7R0ZcvX778/wAA",
	"AP//IedTCkAvAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
