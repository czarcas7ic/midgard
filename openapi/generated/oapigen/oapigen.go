// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// action query metadata
type ActionMeta struct {

	// Int64, The last action event_id that can be used for pagination.
	// This token is needed to be given for next page.
	NextPageToken string `json:"nextPageToken"`

	// Int64, The first action event_id that can be used for previous pagination.
	// This token is needed to be given for previous page.
	PrevPageToken string `json:"prevPageToken"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BorrowerDetails defines model for BorrowerDetails.
type BorrowerDetails struct {

	// List details of all the loans identified with the given address
	Pools []BorrowerPool `json:"pools"`
}

// BorrowerPool defines model for BorrowerPool.
type BorrowerPool struct {

	// The asset that the borrower used as collateral
	CollateralAsset string `json:"collateral_asset"`

	// Int64(e8), The total amount of collateral the system paid back to the user
	CollateralDown string `json:"collateral_down"`

	// Int64(e8), The total amount of collateral that user has given
	CollateralUp string `json:"collateral_up"`

	// Int64(e8), The total amount of debt that the user paid back. denominated in TOR.
	DebtDownTor string `json:"debt_down_tor"`

	// Int64(e8), The total amount of debt user is given as debt. denominated in TOR.
	DebtUpTor string `json:"debt_up_tor"`

	// Int64, Unix timestamp for the last time borrower opened a loan
	LastOpenLoanTimestamp string `json:"last_open_loan_timestamp"`

	// Int64, Unix timestamp for the last time borrower repayment occurred
	LastRepayLoanTimestamp string   `json:"last_repay_loan_timestamp"`
	TargetAssets           []string `json:"target_assets"`
}

// Borrowers defines model for Borrowers.
type Borrowers []string

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryItemPool defines model for DepthHistoryItemPool.
type DepthHistoryItemPool struct {

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8) in rune, the total value in the pool (both assets and rune) at the end of the interval.
	// Note: this is twice of the pool's Rune depth. (as pools are symmetrically balance)
	TotalDepth string `json:"totalDepth"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited to the pool by member.
	// This field is same as the `asset_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total Rune that is currently deposited to the pool by member.
	// This field is same as the `rune_deposit_value` field in thornode. Mainly can be used
	// for tracking, mainly Growth Percentage
	RuneDeposit string `json:"runeDeposit"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total collateral of the pool created by the borrowers.
	TotalCollateral string `json:"totalCollateral"`

	// Int64, Total debt of the pool by the borrowers.
	TotalDebtTor string `json:"totalDebtTor"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset that is currently deposited by the member
	AssetDeposit string `json:"assetDeposit"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime    string                 `json:"endTime"`
	PoolsDepth []DepthHistoryItemPool `json:"poolsDepth"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters. It may be -1 if
	// Midgard is having trouble counting the results and has to cancel the count query
	// (temporary fix). Also, if new action parameters is used it won't be returned.
	Count *string `json:"count,omitempty"`

	// action query metadata
	Meta ActionMeta `json:"meta"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// BorrowerDetailsResponse defines model for BorrowerDetailsResponse.
type BorrowerDetailsResponse BorrowerDetails

// BorrowersResponse defines model for BorrowersResponse.
type BorrowersResponse Borrowers

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`

	// if this is given, the actions for the next page will be given
	NextPageToken *int64 `json:"nextPageToken,omitempty"`

	// if this is given, the actions older than the timestamp will be given
	Timestamp *int64 `json:"timestamp,omitempty"`

	// if this is given, the actions older than the height will be given
	Height *int64 `json:"height,omitempty"`

	// if this is given, the actions for the previous page will be given
	PrevPageToken *int64 `json:"prevPageToken,omitempty"`

	// if this is given, the actions newer than the timestamp will be given
	FromTimestamp *int64 `json:"fromTimestamp,omitempty"`

	// if this is given, the actions newer than the height will be given
	FromHeight *int64 `json:"fromHeight,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetBorrowersAddressesParams defines parameters for GetBorrowersAddresses.
type GetBorrowersAddressesParams struct {

	// Return only borrowers getting loan against this asset as collateral.
	Asset *string `json:"asset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
