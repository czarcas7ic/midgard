// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset balance in the saver pool by member which is redeemable
	AssetBalance string `json:"assetBalance"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"D4H0jo6+fv369f8FAAD//0LyiqXhDAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
