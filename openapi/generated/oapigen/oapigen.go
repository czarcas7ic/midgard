// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryItemPool defines model for DepthHistoryItemPool.
type DepthHistoryItemPool struct {

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8) in rune, the total value in the pool (both assets and rune) at the end of the interval.
	// Note: this is twice of the pool's Rune depth. (as pools are symmetrically balance)
	TotalDepth string `json:"totalDepth"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime    string                 `json:"endTime"`
	PoolsDepth []DepthHistoryItemPool `json:"poolsDepth"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
