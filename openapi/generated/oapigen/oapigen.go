// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
