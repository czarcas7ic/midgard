// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oqJIEAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
