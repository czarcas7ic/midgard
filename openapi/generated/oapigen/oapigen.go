// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins     Coins  `json:"coins"`
	Height    string `json:"height"`
	Timestamp string `json:"timestamp"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated from last 30 days income
	// (linearly, not compounded). E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Estimated annual return (linearly, not compounded).
	// Always estimated from last 30 days (doesn't take period into account).
	// E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Balance at given unix timestamp
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Balance at given block height
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
