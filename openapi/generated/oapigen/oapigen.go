// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Highest effective bond for nodes
	BondHardCap string `json:"bondHardCap"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64, Number of liquidity members in the pool at the end of the interval
	MembersCount string `json:"membersCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryItemPool defines model for DepthHistoryItemPool.
type DepthHistoryItemPool struct {

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8) in rune, the total value in the pool (both assets and rune) at the end of the interval.
	// Note: this is twice of the pool's Rune depth. (as pools are symmetrically balance)
	TotalDepth string `json:"totalDepth"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64, Number of liquidity members in the pool at the end of the interval at time endTime
	EndMemberCount string `json:"endMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64, Number of liquidity member in the pool at the start of the interval at time startTime
	StartMemberCount string `json:"startMemberCount"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total saver reward collected by the pool, shown in pool's ASSET
	SaverEarning string `json:"saverEarning"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, Annual Return estimated linearly (not compounded) for savers from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// If the savers period has not yet been reached, It will show zero instead.
	SaversAPR string `json:"saversAPR"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added in the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset can be redeemed from the saver pool by member
	AssetRedeem string `json:"assetRedeem"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// SaversHistory defines model for SaversHistory.
type SaversHistory struct {
	Intervals SaversHistoryIntervals `json:"intervals"`
	Meta      SaversHistoryMeta      `json:"meta"`
}

// SaversHistoryIntervals defines model for SaversHistoryIntervals.
type SaversHistoryIntervals []SaversHistoryItem

// SaversHistoryItem defines model for SaversHistoryItem.
type SaversHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Number of saver members in the pool at the end of the interval
	SaversCount string `json:"saversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval
	SaversDepth string `json:"saversDepth"`

	// Int64, Savers Units in the saver vault at the end of the interval
	SaversUnits string `json:"saversUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// SaversHistoryMeta defines model for SaversHistoryMeta.
type SaversHistoryMeta struct {

	// Int64, Number of savers member in the savers vault at the end of the interval at time endTime
	EndSaversCount string `json:"endSaversCount"`

	// Int64(e8), The depth in the savers vault at the end of the interval at time
	// endTime
	EndSaversDepth string `json:"endSaversDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Savers Units in the savers vault at the end of the interval at time endTime
	EndUnits string `json:"endUnits"`

	// Int64, Number of savers member in the savers vault at the start of the interval at time startTime
	StartSaversCount string `json:"startSaversCount"`

	// Int64(e8), The depth in savers vault at the start of the interval at time
	// startTime
	StartSaversDepth string `json:"startSaversDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Savers Units in the savers vault at the start of the interval at time startTime
	StartUnits string `json:"startUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or bep2 rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime    string                 `json:"endTime"`
	PoolsDepth []DepthHistoryItemPool `json:"poolsDepth"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters. It may be -1 if
	// Midgard is having trouble counting the results and has to cancel the count query
	// (temporary fix).
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// SaversHistoryResponse defines model for SaversHistoryResponse.
type SaversHistoryResponse SaversHistory

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Comma separated list. Any asset that is part of the action (CHAIN.SYMBOL)
	// Additionally, synth, nosynth, and norune filters can be used for swap, add/withdraw actions.
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap, refund)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSaversHistoryParams defines parameters for GetSaversHistory.
type GetSaversHistoryParams struct {

	// Interval of calculations
	Interval *GetSaversHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSaversHistoryParamsInterval defines parameters for GetSaversHistory.
type GetSaversHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
