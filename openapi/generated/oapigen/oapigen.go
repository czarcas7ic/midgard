// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Int64, Total synth locked in saver vault.
	SaversDepth string `json:"saversDepth"`

	// Int64, Units tracking savers vault ownership.
	SaversUnits string `json:"saversUnits"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// SaverDetails defines model for SaverDetails.
type SaverDetails struct {

	// List details of all the savers identified with the given address
	Pools []SaverPool `json:"pools"`
}

// SaverPool defines model for SaverPool.
type SaverPool struct {

	// Int64(e8), total asset added to the saver pool by member
	AssetAdded string `json:"assetAdded"`

	// saver address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the saver pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the saver pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the saver pool
	DateLastAdded string `json:"dateLastAdded"`

	// The Pool rest of the data are refering to (only those pools can show up which have a corresponding saver pool)
	Pool string `json:"pool"`

	// Int64, saver liquidity units that belong the the member
	SaverUnits string `json:"saverUnits"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// SaverDetailsResponse defines model for SaverDetailsResponse.
type SaverDetailsResponse SaverDetails

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMemberDetailParams defines parameters for GetMemberDetail.
type GetMemberDetailParams struct {

	// A flag to show saver vault membership details, the default is false.
	ShowSavers *bool `json:"showSavers,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9dMVyvUQSO/o6MuXL1/+fwAAAP//88z+FQ/5AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
